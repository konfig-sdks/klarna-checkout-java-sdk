/*
 * Klarna Checkout API V3
 * The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MerchantUrls
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MerchantUrls {
  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private String terms;

  public static final String SERIALIZED_NAME_CHECKOUT = "checkout";
  @SerializedName(SERIALIZED_NAME_CHECKOUT)
  private String checkout;

  public static final String SERIALIZED_NAME_CONFIRMATION = "confirmation";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION)
  private String confirmation;

  public static final String SERIALIZED_NAME_PUSH = "push";
  @SerializedName(SERIALIZED_NAME_PUSH)
  private String push;

  public static final String SERIALIZED_NAME_VALIDATION = "validation";
  @SerializedName(SERIALIZED_NAME_VALIDATION)
  private String validation;

  public static final String SERIALIZED_NAME_NOTIFICATION = "notification";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION)
  private String notification;

  public static final String SERIALIZED_NAME_CANCELLATION_TERMS = "cancellation_terms";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_TERMS)
  private String cancellationTerms;

  public static final String SERIALIZED_NAME_SHIPPING_OPTION_UPDATE = "shipping_option_update";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTION_UPDATE)
  private String shippingOptionUpdate;

  public static final String SERIALIZED_NAME_ADDRESS_UPDATE = "address_update";
  @SerializedName(SERIALIZED_NAME_ADDRESS_UPDATE)
  private String addressUpdate;

  public static final String SERIALIZED_NAME_COUNTRY_CHANGE = "country_change";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CHANGE)
  private String countryChange;

  public MerchantUrls() {
  }

  public MerchantUrls terms(String terms) {
    
    
    if (terms != null && terms.length() < 0) {
      throw new IllegalArgumentException("Invalid value for terms. Length must be greater than or equal to 0.");
    }
    
    this.terms = terms;
    return this;
  }

   /**
   * URL for the terms and conditions page of the merchant. The URL will be displayed inside the Klarna Checkout iFrame.(max 2000 characters) Example: \&quot;https://merchant.com/terms\&quot;
   * @return terms
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://www.example.com/terms.html", required = true, value = "URL for the terms and conditions page of the merchant. The URL will be displayed inside the Klarna Checkout iFrame.(max 2000 characters) Example: \"https://merchant.com/terms\"")

  public String getTerms() {
    return terms;
  }


  public void setTerms(String terms) {
    
    
    if (terms != null && terms.length() < 0) {
      throw new IllegalArgumentException("Invalid value for terms. Length must be greater than or equal to 0.");
    }
    this.terms = terms;
  }


  public MerchantUrls checkout(String checkout) {
    
    
    if (checkout != null && checkout.length() < 0) {
      throw new IllegalArgumentException("Invalid value for checkout. Length must be greater than or equal to 0.");
    }
    
    this.checkout = checkout;
    return this;
  }

   /**
   * URL for the checkout page of the merchant. (max 2000 characters) Example: \&quot;https://merchant.com/checkout\&quot;
   * @return checkout
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://www.example.com/checkout.html", required = true, value = "URL for the checkout page of the merchant. (max 2000 characters) Example: \"https://merchant.com/checkout\"")

  public String getCheckout() {
    return checkout;
  }


  public void setCheckout(String checkout) {
    
    
    if (checkout != null && checkout.length() < 0) {
      throw new IllegalArgumentException("Invalid value for checkout. Length must be greater than or equal to 0.");
    }
    this.checkout = checkout;
  }


  public MerchantUrls confirmation(String confirmation) {
    
    
    if (confirmation != null && confirmation.length() < 0) {
      throw new IllegalArgumentException("Invalid value for confirmation. Length must be greater than or equal to 0.");
    }
    
    this.confirmation = confirmation;
    return this;
  }

   /**
   * URL of the merchant confirmation page. The consumer will be redirected back to the confirmation page if the authorization is successful after the customer clicks on the ‘Place Order’ button inside checkout. The special characters of the confirmation URL should be encoded, e.g. the \&quot;space\&quot; character should be written as \&quot;%20\&quot;. Then, on top of that, the whole confirmation URL should be encoded. E.g. the \&quot;space\&quot; character should become \&quot;%2520\&quot;. (max 2000 characters) Example: \&quot;https://merchant.com/confirmation\&quot;
   * @return confirmation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://www.example.com/confirmation.html", required = true, value = "URL of the merchant confirmation page. The consumer will be redirected back to the confirmation page if the authorization is successful after the customer clicks on the ‘Place Order’ button inside checkout. The special characters of the confirmation URL should be encoded, e.g. the \"space\" character should be written as \"%20\". Then, on top of that, the whole confirmation URL should be encoded. E.g. the \"space\" character should become \"%2520\". (max 2000 characters) Example: \"https://merchant.com/confirmation\"")

  public String getConfirmation() {
    return confirmation;
  }


  public void setConfirmation(String confirmation) {
    
    
    if (confirmation != null && confirmation.length() < 0) {
      throw new IllegalArgumentException("Invalid value for confirmation. Length must be greater than or equal to 0.");
    }
    this.confirmation = confirmation;
  }


  public MerchantUrls push(String push) {
    
    
    if (push != null && push.length() < 0) {
      throw new IllegalArgumentException("Invalid value for push. Length must be greater than or equal to 0.");
    }
    
    this.push = push;
    return this;
  }

   /**
   * URL that will be used for push notification when an order is completed. Should be different than checkout and confirmation URLs. (max 2000 characters) Example: \&quot;https://merchant.com/push\&quot;
   * @return push
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://www.example.com/api/push", required = true, value = "URL that will be used for push notification when an order is completed. Should be different than checkout and confirmation URLs. (max 2000 characters) Example: \"https://merchant.com/push\"")

  public String getPush() {
    return push;
  }


  public void setPush(String push) {
    
    
    if (push != null && push.length() < 0) {
      throw new IllegalArgumentException("Invalid value for push. Length must be greater than or equal to 0.");
    }
    this.push = push;
  }


  public MerchantUrls validation(String validation) {
    
    
    if (validation != null && validation.length() < 0) {
      throw new IllegalArgumentException("Invalid value for validation. Length must be greater than or equal to 0.");
    }
    
    this.validation = validation;
    return this;
  }

   /**
   * URL that will be requested for final merchant validation. (must be https, max 2000 characters) Example: \&quot;https://merchant.com/validation\&quot;
   * @return validation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/api/validation", value = "URL that will be requested for final merchant validation. (must be https, max 2000 characters) Example: \"https://merchant.com/validation\"")

  public String getValidation() {
    return validation;
  }


  public void setValidation(String validation) {
    
    
    if (validation != null && validation.length() < 0) {
      throw new IllegalArgumentException("Invalid value for validation. Length must be greater than or equal to 0.");
    }
    this.validation = validation;
  }


  public MerchantUrls notification(String notification) {
    
    
    if (notification != null && notification.length() < 0) {
      throw new IllegalArgumentException("Invalid value for notification. Length must be greater than or equal to 0.");
    }
    
    this.notification = notification;
    return this;
  }

   /**
   * URL for notifications on pending orders. (max 2000 characters) Example: \&quot;https://merchant.com/notification/{checkout.order.id}\&quot;
   * @return notification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/api/pending", value = "URL for notifications on pending orders. (max 2000 characters) Example: \"https://merchant.com/notification/{checkout.order.id}\"")

  public String getNotification() {
    return notification;
  }


  public void setNotification(String notification) {
    
    
    if (notification != null && notification.length() < 0) {
      throw new IllegalArgumentException("Invalid value for notification. Length must be greater than or equal to 0.");
    }
    this.notification = notification;
  }


  public MerchantUrls cancellationTerms(String cancellationTerms) {
    
    
    if (cancellationTerms != null && cancellationTerms.length() < 0) {
      throw new IllegalArgumentException("Invalid value for cancellationTerms. Length must be greater than or equal to 0.");
    }
    
    this.cancellationTerms = cancellationTerms;
    return this;
  }

   /**
   * URL for the cancellation terms page of the merchant. The URL will be displayed in the email that is sent to the customer after the order is captured.(max 2000 characters) Example: \&quot;https://merchant.com/terms/cancelation\&quot;
   * @return cancellationTerms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/terms/cancellation.html", value = "URL for the cancellation terms page of the merchant. The URL will be displayed in the email that is sent to the customer after the order is captured.(max 2000 characters) Example: \"https://merchant.com/terms/cancelation\"")

  public String getCancellationTerms() {
    return cancellationTerms;
  }


  public void setCancellationTerms(String cancellationTerms) {
    
    
    if (cancellationTerms != null && cancellationTerms.length() < 0) {
      throw new IllegalArgumentException("Invalid value for cancellationTerms. Length must be greater than or equal to 0.");
    }
    this.cancellationTerms = cancellationTerms;
  }


  public MerchantUrls shippingOptionUpdate(String shippingOptionUpdate) {
    
    
    if (shippingOptionUpdate != null && shippingOptionUpdate.length() < 0) {
      throw new IllegalArgumentException("Invalid value for shippingOptionUpdate. Length must be greater than or equal to 0.");
    }
    
    this.shippingOptionUpdate = shippingOptionUpdate;
    return this;
  }

   /**
   * URL for shipping option update. (must be https, max 2000 characters) Example: \&quot;https://merchant.com/shippingoptionupdate\&quot;
   * @return shippingOptionUpdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/api/shipment", value = "URL for shipping option update. (must be https, max 2000 characters) Example: \"https://merchant.com/shippingoptionupdate\"")

  public String getShippingOptionUpdate() {
    return shippingOptionUpdate;
  }


  public void setShippingOptionUpdate(String shippingOptionUpdate) {
    
    
    if (shippingOptionUpdate != null && shippingOptionUpdate.length() < 0) {
      throw new IllegalArgumentException("Invalid value for shippingOptionUpdate. Length must be greater than or equal to 0.");
    }
    this.shippingOptionUpdate = shippingOptionUpdate;
  }


  public MerchantUrls addressUpdate(String addressUpdate) {
    
    
    if (addressUpdate != null && addressUpdate.length() < 0) {
      throw new IllegalArgumentException("Invalid value for addressUpdate. Length must be greater than or equal to 0.");
    }
    
    this.addressUpdate = addressUpdate;
    return this;
  }

   /**
   * URL for shipping, tax and purchase currency updates. Will be called on address changes. (must be https, max 2000 characters) Example: \&quot;https://merchant.com/addressupdate\&quot;
   * @return addressUpdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/api/address", value = "URL for shipping, tax and purchase currency updates. Will be called on address changes. (must be https, max 2000 characters) Example: \"https://merchant.com/addressupdate\"")

  public String getAddressUpdate() {
    return addressUpdate;
  }


  public void setAddressUpdate(String addressUpdate) {
    
    
    if (addressUpdate != null && addressUpdate.length() < 0) {
      throw new IllegalArgumentException("Invalid value for addressUpdate. Length must be greater than or equal to 0.");
    }
    this.addressUpdate = addressUpdate;
  }


  public MerchantUrls countryChange(String countryChange) {
    
    
    if (countryChange != null && countryChange.length() < 0) {
      throw new IllegalArgumentException("Invalid value for countryChange. Length must be greater than or equal to 0.");
    }
    
    this.countryChange = countryChange;
    return this;
  }

   /**
   * URL for shipping, tax and purchase currency updates. Will be called on billing or shipping country changes. (must be https, max 2000 characters) Example: \&quot;https://merchant.com/countrychange\&quot;
   * @return countryChange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/api/country", value = "URL for shipping, tax and purchase currency updates. Will be called on billing or shipping country changes. (must be https, max 2000 characters) Example: \"https://merchant.com/countrychange\"")

  public String getCountryChange() {
    return countryChange;
  }


  public void setCountryChange(String countryChange) {
    
    
    if (countryChange != null && countryChange.length() < 0) {
      throw new IllegalArgumentException("Invalid value for countryChange. Length must be greater than or equal to 0.");
    }
    this.countryChange = countryChange;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MerchantUrls instance itself
   */
  public MerchantUrls putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantUrls merchantUrls = (MerchantUrls) o;
    return Objects.equals(this.terms, merchantUrls.terms) &&
        Objects.equals(this.checkout, merchantUrls.checkout) &&
        Objects.equals(this.confirmation, merchantUrls.confirmation) &&
        Objects.equals(this.push, merchantUrls.push) &&
        Objects.equals(this.validation, merchantUrls.validation) &&
        Objects.equals(this.notification, merchantUrls.notification) &&
        Objects.equals(this.cancellationTerms, merchantUrls.cancellationTerms) &&
        Objects.equals(this.shippingOptionUpdate, merchantUrls.shippingOptionUpdate) &&
        Objects.equals(this.addressUpdate, merchantUrls.addressUpdate) &&
        Objects.equals(this.countryChange, merchantUrls.countryChange)&&
        Objects.equals(this.additionalProperties, merchantUrls.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(terms, checkout, confirmation, push, validation, notification, cancellationTerms, shippingOptionUpdate, addressUpdate, countryChange, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantUrls {\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    checkout: ").append(toIndentedString(checkout)).append("\n");
    sb.append("    confirmation: ").append(toIndentedString(confirmation)).append("\n");
    sb.append("    push: ").append(toIndentedString(push)).append("\n");
    sb.append("    validation: ").append(toIndentedString(validation)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    cancellationTerms: ").append(toIndentedString(cancellationTerms)).append("\n");
    sb.append("    shippingOptionUpdate: ").append(toIndentedString(shippingOptionUpdate)).append("\n");
    sb.append("    addressUpdate: ").append(toIndentedString(addressUpdate)).append("\n");
    sb.append("    countryChange: ").append(toIndentedString(countryChange)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("terms");
    openapiFields.add("checkout");
    openapiFields.add("confirmation");
    openapiFields.add("push");
    openapiFields.add("validation");
    openapiFields.add("notification");
    openapiFields.add("cancellation_terms");
    openapiFields.add("shipping_option_update");
    openapiFields.add("address_update");
    openapiFields.add("country_change");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("terms");
    openapiRequiredFields.add("checkout");
    openapiRequiredFields.add("confirmation");
    openapiRequiredFields.add("push");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantUrls
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantUrls.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantUrls is not found in the empty JSON string", MerchantUrls.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MerchantUrls.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terms").toString()));
      }
      if (!jsonObj.get("checkout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkout").toString()));
      }
      if (!jsonObj.get("confirmation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmation").toString()));
      }
      if (!jsonObj.get("push").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `push` to be a primitive type in the JSON string but got `%s`", jsonObj.get("push").toString()));
      }
      if ((jsonObj.get("validation") != null && !jsonObj.get("validation").isJsonNull()) && !jsonObj.get("validation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validation").toString()));
      }
      if ((jsonObj.get("notification") != null && !jsonObj.get("notification").isJsonNull()) && !jsonObj.get("notification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification").toString()));
      }
      if ((jsonObj.get("cancellation_terms") != null && !jsonObj.get("cancellation_terms").isJsonNull()) && !jsonObj.get("cancellation_terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellation_terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancellation_terms").toString()));
      }
      if ((jsonObj.get("shipping_option_update") != null && !jsonObj.get("shipping_option_update").isJsonNull()) && !jsonObj.get("shipping_option_update").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_option_update` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_option_update").toString()));
      }
      if ((jsonObj.get("address_update") != null && !jsonObj.get("address_update").isJsonNull()) && !jsonObj.get("address_update").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_update` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_update").toString()));
      }
      if ((jsonObj.get("country_change") != null && !jsonObj.get("country_change").isJsonNull()) && !jsonObj.get("country_change").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_change` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_change").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantUrls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantUrls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantUrls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantUrls.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantUrls>() {
           @Override
           public void write(JsonWriter out, MerchantUrls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantUrls read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MerchantUrls instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantUrls given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantUrls
  * @throws IOException if the JSON string is invalid with respect to MerchantUrls
  */
  public static MerchantUrls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantUrls.class);
  }

 /**
  * Convert an instance of MerchantUrls to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Klarna Checkout API V3
 * The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ProductIdentifiers;
import com.konfigthis.client.model.ShippingAttributes;
import com.konfigthis.client.model.Subscription;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OrderLine
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OrderLine {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private Subscription subscription;

  public static final String SERIALIZED_NAME_QUANTITY_UNIT = "quantity_unit";
  @SerializedName(SERIALIZED_NAME_QUANTITY_UNIT)
  private String quantityUnit;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Long unitPrice;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private Long taxRate;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Long totalAmount;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT_AMOUNT = "total_discount_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT_AMOUNT)
  private Long totalDiscountAmount;

  public static final String SERIALIZED_NAME_TOTAL_TAX_AMOUNT = "total_tax_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_AMOUNT)
  private Long totalTaxAmount;

  public static final String SERIALIZED_NAME_MERCHANT_DATA = "merchant_data";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DATA)
  private String merchantData;

  public static final String SERIALIZED_NAME_PRODUCT_URL = "product_url";
  @SerializedName(SERIALIZED_NAME_PRODUCT_URL)
  private String productUrl;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_PRODUCT_IDENTIFIERS = "product_identifiers";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDENTIFIERS)
  private ProductIdentifiers productIdentifiers;

  public static final String SERIALIZED_NAME_SHIPPING_ATTRIBUTES = "shipping_attributes";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ATTRIBUTES)
  private ShippingAttributes shippingAttributes;

  public OrderLine() {
  }

  public OrderLine type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of the order line item. The possible values are:&lt;ul&gt;&lt;li&gt;&lt;em&gt;physical (physical good)&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;discount&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;shipping_fee&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;sales_tax (depends on the country/city, usually called VAT)&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;digital (digital good)&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;gift_card&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;store_credit (credit from the merchant)&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;surcharge (extra charge)&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "physical", value = "Type of the order line item. The possible values are:<ul><li><em>physical (physical good)</em></li><li><em>discount</em></li><li><em>shipping_fee</em></li><li><em>sales_tax (depends on the country/city, usually called VAT)</em></li><li><em>digital (digital good)</em></li><li><em>gift_card</em></li><li><em>store_credit (credit from the merchant)</em></li><li><em>surcharge (extra charge)</em></li></ul>")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public OrderLine reference(String reference) {
    
    
    if (reference != null && reference.length() < 0) {
      throw new IllegalArgumentException("Invalid value for reference. Length must be greater than or equal to 0.");
    }
    
    this.reference = reference;
    return this;
  }

   /**
   * Article number, SKU or similar. (max 255 characters)
   * @return reference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "19-402-USA", value = "Article number, SKU or similar. (max 255 characters)")

  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    
    
    if (reference != null && reference.length() < 0) {
      throw new IllegalArgumentException("Invalid value for reference. Length must be greater than or equal to 0.");
    }
    this.reference = reference;
  }


  public OrderLine name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Descriptive name of the order line item (max 255 characters)
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Red T-Shirt", required = true, value = "Descriptive name of the order line item (max 255 characters)")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public OrderLine quantity(Long quantity) {
    if (quantity != null && quantity < 0) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 0.");
    }
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Non-negative number. Quantity of the order line item.
   * minimum: 0
   * @return quantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5", required = true, value = "Non-negative number. Quantity of the order line item.")

  public Long getQuantity() {
    return quantity;
  }


  public void setQuantity(Long quantity) {
    if (quantity != null && quantity < 0) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 0.");
    }
    
    
    this.quantity = quantity;
  }


  public OrderLine subscription(Subscription subscription) {
    
    
    
    
    this.subscription = subscription;
    return this;
  }

   /**
   * Get subscription
   * @return subscription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Subscription getSubscription() {
    return subscription;
  }


  public void setSubscription(Subscription subscription) {
    
    
    
    this.subscription = subscription;
  }


  public OrderLine quantityUnit(String quantityUnit) {
    
    
    
    
    this.quantityUnit = quantityUnit;
    return this;
  }

   /**
   * Unit used to describe the quantity, e.g. kg, pcs... If defined has to be 1-8 characters
   * @return quantityUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pcs", value = "Unit used to describe the quantity, e.g. kg, pcs... If defined has to be 1-8 characters")

  public String getQuantityUnit() {
    return quantityUnit;
  }


  public void setQuantityUnit(String quantityUnit) {
    
    
    
    this.quantityUnit = quantityUnit;
  }


  public OrderLine unitPrice(Long unitPrice) {
    
    if (unitPrice != null && unitPrice > 100000000) {
      throw new IllegalArgumentException("Invalid value for unitPrice. Must be less than or equal to 100000000.");
    }
    
    
    this.unitPrice = unitPrice;
    return this;
  }

   /**
   * Minor units. Includes tax, excludes discount. (max value: 100000000).  Example: 100 Euros should be 10000.
   * maximum: 100000000
   * @return unitPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10000", required = true, value = "Minor units. Includes tax, excludes discount. (max value: 100000000).  Example: 100 Euros should be 10000.")

  public Long getUnitPrice() {
    return unitPrice;
  }


  public void setUnitPrice(Long unitPrice) {
    
    if (unitPrice != null && unitPrice > 100000000) {
      throw new IllegalArgumentException("Invalid value for unitPrice. Must be less than or equal to 100000000.");
    }
    
    this.unitPrice = unitPrice;
  }


  public OrderLine taxRate(Long taxRate) {
    
    if (taxRate != null && taxRate > 10000) {
      throw new IllegalArgumentException("Invalid value for taxRate. Must be less than or equal to 10000.");
    }
    
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Non-negative value. The percentage value is represented with two implicit decimals. (max 10000)  Example: 25% should be 2500.
   * maximum: 10000
   * @return taxRate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1000", required = true, value = "Non-negative value. The percentage value is represented with two implicit decimals. (max 10000)  Example: 25% should be 2500.")

  public Long getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(Long taxRate) {
    
    if (taxRate != null && taxRate > 10000) {
      throw new IllegalArgumentException("Invalid value for taxRate. Must be less than or equal to 10000.");
    }
    
    this.taxRate = taxRate;
  }


  public OrderLine totalAmount(Long totalAmount) {
    
    if (totalAmount != null && totalAmount > 100000000) {
      throw new IllegalArgumentException("Invalid value for totalAmount. Must be less than or equal to 100000000.");
    }
    
    
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Minor units. Includes tax and discount.   Example: 25 euros should be 2500 Value &#x3D; (quantity x unit_price) - total_discount_amount. (max value: 100000000)
   * maximum: 100000000
   * @return totalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "50000", required = true, value = "Minor units. Includes tax and discount.   Example: 25 euros should be 2500 Value = (quantity x unit_price) - total_discount_amount. (max value: 100000000)")

  public Long getTotalAmount() {
    return totalAmount;
  }


  public void setTotalAmount(Long totalAmount) {
    
    if (totalAmount != null && totalAmount > 100000000) {
      throw new IllegalArgumentException("Invalid value for totalAmount. Must be less than or equal to 100000000.");
    }
    
    this.totalAmount = totalAmount;
  }


  public OrderLine totalDiscountAmount(Long totalDiscountAmount) {
    if (totalDiscountAmount != null && totalDiscountAmount < 0) {
      throw new IllegalArgumentException("Invalid value for totalDiscountAmount. Must be greater than or equal to 0.");
    }
    
    
    
    this.totalDiscountAmount = totalDiscountAmount;
    return this;
  }

   /**
   * Non-negative minor units. Includes tax.  Example: 25 euros should be 2500
   * minimum: 0
   * @return totalDiscountAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Non-negative minor units. Includes tax.  Example: 25 euros should be 2500")

  public Long getTotalDiscountAmount() {
    return totalDiscountAmount;
  }


  public void setTotalDiscountAmount(Long totalDiscountAmount) {
    if (totalDiscountAmount != null && totalDiscountAmount < 0) {
      throw new IllegalArgumentException("Invalid value for totalDiscountAmount. Must be greater than or equal to 0.");
    }
    
    
    this.totalDiscountAmount = totalDiscountAmount;
  }


  public OrderLine totalTaxAmount(Long totalTaxAmount) {
    
    
    
    
    this.totalTaxAmount = totalTaxAmount;
    return this;
  }

   /**
   * Must be within ±1 of total_amount - total_amount \\* 10000 / (10000 + tax_rate). Negative when type is discount.
   * @return totalTaxAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4545", required = true, value = "Must be within ±1 of total_amount - total_amount \\* 10000 / (10000 + tax_rate). Negative when type is discount.")

  public Long getTotalTaxAmount() {
    return totalTaxAmount;
  }


  public void setTotalTaxAmount(Long totalTaxAmount) {
    
    
    
    this.totalTaxAmount = totalTaxAmount;
  }


  public OrderLine merchantData(String merchantData) {
    
    
    if (merchantData != null && merchantData.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantData. Length must be greater than or equal to 0.");
    }
    
    this.merchantData = merchantData;
    return this;
  }

   /**
   * Property used to store additional metadata per item that will be returned whenever an order is read from Klarna. Pass through field. (max 1024 characters).
   * @return merchantData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"marketplace_seller_info\":[{\"product_category\":\"Women's Fashion\",\"product_name\":\"Women Sweatshirt\"}]}", value = "Property used to store additional metadata per item that will be returned whenever an order is read from Klarna. Pass through field. (max 1024 characters).")

  public String getMerchantData() {
    return merchantData;
  }


  public void setMerchantData(String merchantData) {
    
    
    if (merchantData != null && merchantData.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantData. Length must be greater than or equal to 0.");
    }
    this.merchantData = merchantData;
  }


  public OrderLine productUrl(String productUrl) {
    
    
    if (productUrl != null && productUrl.length() < 0) {
      throw new IllegalArgumentException("Invalid value for productUrl. Length must be greater than or equal to 0.");
    }
    
    this.productUrl = productUrl;
    return this;
  }

   /**
   * URL to the product page that can be later embedded in communications between Klarna and the customer. (max 1024 characters)
   * @return productUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/products/f2a8d7e34", value = "URL to the product page that can be later embedded in communications between Klarna and the customer. (max 1024 characters)")

  public String getProductUrl() {
    return productUrl;
  }


  public void setProductUrl(String productUrl) {
    
    
    if (productUrl != null && productUrl.length() < 0) {
      throw new IllegalArgumentException("Invalid value for productUrl. Length must be greater than or equal to 0.");
    }
    this.productUrl = productUrl;
  }


  public OrderLine imageUrl(String imageUrl) {
    
    
    if (imageUrl != null && imageUrl.length() < 0) {
      throw new IllegalArgumentException("Invalid value for imageUrl. Length must be greater than or equal to 0.");
    }
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters)  Improves post-purchase customer experiences.
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.exampleobjects.com/product-image-1200x1200.jpg", value = "URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters)  Improves post-purchase customer experiences.")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    
    
    if (imageUrl != null && imageUrl.length() < 0) {
      throw new IllegalArgumentException("Invalid value for imageUrl. Length must be greater than or equal to 0.");
    }
    this.imageUrl = imageUrl;
  }


  public OrderLine productIdentifiers(ProductIdentifiers productIdentifiers) {
    
    
    
    
    this.productIdentifiers = productIdentifiers;
    return this;
  }

   /**
   * Get productIdentifiers
   * @return productIdentifiers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductIdentifiers getProductIdentifiers() {
    return productIdentifiers;
  }


  public void setProductIdentifiers(ProductIdentifiers productIdentifiers) {
    
    
    
    this.productIdentifiers = productIdentifiers;
  }


  public OrderLine shippingAttributes(ShippingAttributes shippingAttributes) {
    
    
    
    
    this.shippingAttributes = shippingAttributes;
    return this;
  }

   /**
   * Get shippingAttributes
   * @return shippingAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShippingAttributes getShippingAttributes() {
    return shippingAttributes;
  }


  public void setShippingAttributes(ShippingAttributes shippingAttributes) {
    
    
    
    this.shippingAttributes = shippingAttributes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrderLine instance itself
   */
  public OrderLine putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLine orderLine = (OrderLine) o;
    return Objects.equals(this.type, orderLine.type) &&
        Objects.equals(this.reference, orderLine.reference) &&
        Objects.equals(this.name, orderLine.name) &&
        Objects.equals(this.quantity, orderLine.quantity) &&
        Objects.equals(this.subscription, orderLine.subscription) &&
        Objects.equals(this.quantityUnit, orderLine.quantityUnit) &&
        Objects.equals(this.unitPrice, orderLine.unitPrice) &&
        Objects.equals(this.taxRate, orderLine.taxRate) &&
        Objects.equals(this.totalAmount, orderLine.totalAmount) &&
        Objects.equals(this.totalDiscountAmount, orderLine.totalDiscountAmount) &&
        Objects.equals(this.totalTaxAmount, orderLine.totalTaxAmount) &&
        Objects.equals(this.merchantData, orderLine.merchantData) &&
        Objects.equals(this.productUrl, orderLine.productUrl) &&
        Objects.equals(this.imageUrl, orderLine.imageUrl) &&
        Objects.equals(this.productIdentifiers, orderLine.productIdentifiers) &&
        Objects.equals(this.shippingAttributes, orderLine.shippingAttributes)&&
        Objects.equals(this.additionalProperties, orderLine.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, reference, name, quantity, subscription, quantityUnit, unitPrice, taxRate, totalAmount, totalDiscountAmount, totalTaxAmount, merchantData, productUrl, imageUrl, productIdentifiers, shippingAttributes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLine {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    quantityUnit: ").append(toIndentedString(quantityUnit)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    totalDiscountAmount: ").append(toIndentedString(totalDiscountAmount)).append("\n");
    sb.append("    totalTaxAmount: ").append(toIndentedString(totalTaxAmount)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    productUrl: ").append(toIndentedString(productUrl)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    productIdentifiers: ").append(toIndentedString(productIdentifiers)).append("\n");
    sb.append("    shippingAttributes: ").append(toIndentedString(shippingAttributes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("reference");
    openapiFields.add("name");
    openapiFields.add("quantity");
    openapiFields.add("subscription");
    openapiFields.add("quantity_unit");
    openapiFields.add("unit_price");
    openapiFields.add("tax_rate");
    openapiFields.add("total_amount");
    openapiFields.add("total_discount_amount");
    openapiFields.add("total_tax_amount");
    openapiFields.add("merchant_data");
    openapiFields.add("product_url");
    openapiFields.add("image_url");
    openapiFields.add("product_identifiers");
    openapiFields.add("shipping_attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("unit_price");
    openapiRequiredFields.add("tax_rate");
    openapiRequiredFields.add("total_amount");
    openapiRequiredFields.add("total_tax_amount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderLine
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrderLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLine is not found in the empty JSON string", OrderLine.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderLine.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `subscription`
      if (jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) {
        Subscription.validateJsonObject(jsonObj.getAsJsonObject("subscription"));
      }
      if ((jsonObj.get("quantity_unit") != null && !jsonObj.get("quantity_unit").isJsonNull()) && !jsonObj.get("quantity_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantity_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quantity_unit").toString()));
      }
      if ((jsonObj.get("merchant_data") != null && !jsonObj.get("merchant_data").isJsonNull()) && !jsonObj.get("merchant_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_data").toString()));
      }
      if ((jsonObj.get("product_url") != null && !jsonObj.get("product_url").isJsonNull()) && !jsonObj.get("product_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_url").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      // validate the optional field `product_identifiers`
      if (jsonObj.get("product_identifiers") != null && !jsonObj.get("product_identifiers").isJsonNull()) {
        ProductIdentifiers.validateJsonObject(jsonObj.getAsJsonObject("product_identifiers"));
      }
      // validate the optional field `shipping_attributes`
      if (jsonObj.get("shipping_attributes") != null && !jsonObj.get("shipping_attributes").isJsonNull()) {
        ShippingAttributes.validateJsonObject(jsonObj.getAsJsonObject("shipping_attributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLine.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLine>() {
           @Override
           public void write(JsonWriter out, OrderLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLine read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OrderLine instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderLine given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderLine
  * @throws IOException if the JSON string is invalid with respect to OrderLine
  */
  public static OrderLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLine.class);
  }

 /**
  * Convert an instance of OrderLine to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


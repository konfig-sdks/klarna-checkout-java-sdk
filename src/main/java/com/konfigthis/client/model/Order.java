/*
 * Klarna Checkout API V3
 * The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.DiscountLine;
import com.konfigthis.client.model.Gui;
import com.konfigthis.client.model.MerchantRequested;
import com.konfigthis.client.model.MerchantUrls;
import com.konfigthis.client.model.Options;
import com.konfigthis.client.model.OrderLine;
import com.konfigthis.client.model.PaymentProvider;
import com.konfigthis.client.model.ShippingOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Order
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Order {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PURCHASE_COUNTRY = "purchase_country";
  @SerializedName(SERIALIZED_NAME_PURCHASE_COUNTRY)
  private String purchaseCountry;

  public static final String SERIALIZED_NAME_PURCHASE_CURRENCY = "purchase_currency";
  @SerializedName(SERIALIZED_NAME_PURCHASE_CURRENCY)
  private String purchaseCurrency;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public static final String SERIALIZED_NAME_ORDER_AMOUNT = "order_amount";
  @SerializedName(SERIALIZED_NAME_ORDER_AMOUNT)
  private Long orderAmount;

  public static final String SERIALIZED_NAME_ORDER_TAX_AMOUNT = "order_tax_amount";
  @SerializedName(SERIALIZED_NAME_ORDER_TAX_AMOUNT)
  private Long orderTaxAmount;

  public static final String SERIALIZED_NAME_ORDER_LINES = "order_lines";
  @SerializedName(SERIALIZED_NAME_ORDER_LINES)
  private List<OrderLine> orderLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_MERCHANT_URLS = "merchant_urls";
  @SerializedName(SERIALIZED_NAME_MERCHANT_URLS)
  private MerchantUrls merchantUrls;

  public static final String SERIALIZED_NAME_HTML_SNIPPET = "html_snippet";
  @SerializedName(SERIALIZED_NAME_HTML_SNIPPET)
  private String htmlSnippet;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE1 = "merchant_reference1";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE1)
  private String merchantReference1;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE2 = "merchant_reference2";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE2)
  private String merchantReference2;

  public static final String SERIALIZED_NAME_STARTED_AT = "started_at";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completed_at";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private OffsetDateTime completedAt;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_AT = "last_modified_at";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_AT)
  private OffsetDateTime lastModifiedAt;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Options options;

  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private Attachment attachment;

  public static final String SERIALIZED_NAME_EXTERNAL_PAYMENT_METHODS = "external_payment_methods";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PAYMENT_METHODS)
  private List<PaymentProvider> externalPaymentMethods = null;

  public static final String SERIALIZED_NAME_EXTERNAL_CHECKOUTS = "external_checkouts";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CHECKOUTS)
  private List<PaymentProvider> externalCheckouts = null;

  public static final String SERIALIZED_NAME_SHIPPING_COUNTRIES = "shipping_countries";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COUNTRIES)
  private List<String> shippingCountries = null;

  public static final String SERIALIZED_NAME_SHIPPING_OPTIONS = "shipping_options";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTIONS)
  private List<ShippingOption> shippingOptions = null;

  public static final String SERIALIZED_NAME_MERCHANT_DATA = "merchant_data";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DATA)
  private String merchantData;

  public static final String SERIALIZED_NAME_GUI = "gui";
  @SerializedName(SERIALIZED_NAME_GUI)
  private Gui gui;

  public static final String SERIALIZED_NAME_MERCHANT_REQUESTED = "merchant_requested";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REQUESTED)
  private MerchantRequested merchantRequested;

  public static final String SERIALIZED_NAME_SELECTED_SHIPPING_OPTION = "selected_shipping_option";
  @SerializedName(SERIALIZED_NAME_SELECTED_SHIPPING_OPTION)
  private ShippingOption selectedShippingOption;

  public static final String SERIALIZED_NAME_RECURRING = "recurring";
  @SerializedName(SERIALIZED_NAME_RECURRING)
  private Boolean recurring;

  public static final String SERIALIZED_NAME_RECURRING_TOKEN = "recurring_token";
  @SerializedName(SERIALIZED_NAME_RECURRING_TOKEN)
  private String recurringToken;

  public static final String SERIALIZED_NAME_RECURRING_DESCRIPTION = "recurring_description";
  @SerializedName(SERIALIZED_NAME_RECURRING_DESCRIPTION)
  private String recurringDescription;

  public static final String SERIALIZED_NAME_BILLING_COUNTRIES = "billing_countries";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRIES)
  private List<String> billingCountries = null;

  public static final String SERIALIZED_NAME_DISCOUNT_LINES = "discount_lines";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_LINES)
  private List<DiscountLine> discountLines = null;

  public Order() {
  }

  
  public Order(
     String orderId, 
     String name, 
     String htmlSnippet, 
     OffsetDateTime startedAt, 
     OffsetDateTime completedAt, 
     OffsetDateTime lastModifiedAt, 
     String recurringToken, 
     String recurringDescription
  ) {
    this();
    this.orderId = orderId;
    this.name = name;
    this.htmlSnippet = htmlSnippet;
    this.startedAt = startedAt;
    this.completedAt = completedAt;
    this.lastModifiedAt = lastModifiedAt;
    this.recurringToken = recurringToken;
    this.recurringDescription = recurringDescription;
  }

  public Order tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public Order addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Extra information added to the order.  Example: [\&quot;dangerous_goods\&quot;, \&quot;bulky\&quot;]
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra information added to the order.  Example: [\"dangerous_goods\", \"bulky\"]")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


   /**
   * Unique order ID that will be used for the entire lifecycle of the order. (max 255 characters)
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "f3392f8b-6116-4073-ab96-e330819e2c07", value = "Unique order ID that will be used for the entire lifecycle of the order. (max 255 characters)")

  public String getOrderId() {
    return orderId;
  }




   /**
   * The merchant name (max 255 characters).
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Women's Fashion", value = "The merchant name (max 255 characters).")

  public String getName() {
    return name;
  }




  public Order purchaseCountry(String purchaseCountry) {
    
    
    
    
    this.purchaseCountry = purchaseCountry;
    return this;
  }

   /**
   * The purchase country of the merchant&#39;s store. The format to be used is ISO 3166 alpha-2. Eg: GB, SE, DE, US, etc.   Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://docs.klarna.com/klarna-checkout/popular-use-cases/selling-to-multiple-countries/
   * @return purchaseCountry
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "US", required = true, value = "The purchase country of the merchant's store. The format to be used is ISO 3166 alpha-2. Eg: GB, SE, DE, US, etc.   Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://docs.klarna.com/klarna-checkout/popular-use-cases/selling-to-multiple-countries/")

  public String getPurchaseCountry() {
    return purchaseCountry;
  }


  public void setPurchaseCountry(String purchaseCountry) {
    
    
    
    this.purchaseCountry = purchaseCountry;
  }


  public Order purchaseCurrency(String purchaseCurrency) {
    
    
    
    
    this.purchaseCurrency = purchaseCurrency;
    return this;
  }

   /**
   * The purchase currency of the merchant&#39;s store. The format to be used is ISO 4217. Eg: USD, EUR, SEK, GBP, etc.  Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://docs.klarna.com/klarna-checkout/popular-use-cases/selling-to-multiple-countries/
   * @return purchaseCurrency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "USD", required = true, value = "The purchase currency of the merchant's store. The format to be used is ISO 4217. Eg: USD, EUR, SEK, GBP, etc.  Note: purchase country and currency need to match the defined merchant configuration. For global configuration read this https://docs.klarna.com/klarna-checkout/popular-use-cases/selling-to-multiple-countries/")

  public String getPurchaseCurrency() {
    return purchaseCurrency;
  }


  public void setPurchaseCurrency(String purchaseCurrency) {
    
    
    
    this.purchaseCurrency = purchaseCurrency;
  }


  public Order locale(String locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * Used to define the language and region of the customer. RFC 1766 customer&#39;s locale.
   * @return locale
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "en-US", required = true, value = "Used to define the language and region of the customer. RFC 1766 customer's locale.")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    
    
    
    this.locale = locale;
  }


  public Order status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the order. The status will be ‘incomplete’ until the customer has been successfully authorized.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CHECKOUT_INCOMPLETE", value = "The current status of the order. The status will be ‘incomplete’ until the customer has been successfully authorized.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public Order billingAddress(Address billingAddress) {
    
    
    
    
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getBillingAddress() {
    return billingAddress;
  }


  public void setBillingAddress(Address billingAddress) {
    
    
    
    this.billingAddress = billingAddress;
  }


  public Order shippingAddress(Address shippingAddress) {
    
    
    
    
    this.shippingAddress = shippingAddress;
    return this;
  }

   /**
   * Get shippingAddress
   * @return shippingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getShippingAddress() {
    return shippingAddress;
  }


  public void setShippingAddress(Address shippingAddress) {
    
    
    
    this.shippingAddress = shippingAddress;
  }


  public Order orderAmount(Long orderAmount) {
    if (orderAmount != null && orderAmount < 0) {
      throw new IllegalArgumentException("Invalid value for orderAmount. Must be greater than or equal to 0.");
    }
    
    
    
    this.orderAmount = orderAmount;
    return this;
  }

   /**
   * Total amount of the order including tax and any available discounts. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.
   * minimum: 0
   * @return orderAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "50000", required = true, value = "Total amount of the order including tax and any available discounts. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.")

  public Long getOrderAmount() {
    return orderAmount;
  }


  public void setOrderAmount(Long orderAmount) {
    if (orderAmount != null && orderAmount < 0) {
      throw new IllegalArgumentException("Invalid value for orderAmount. Must be greater than or equal to 0.");
    }
    
    
    this.orderAmount = orderAmount;
  }


  public Order orderTaxAmount(Long orderTaxAmount) {
    if (orderTaxAmount != null && orderTaxAmount < 0) {
      throw new IllegalArgumentException("Invalid value for orderTaxAmount. Must be greater than or equal to 0.");
    }
    
    
    
    this.orderTaxAmount = orderTaxAmount;
    return this;
  }

   /**
   * Total tax amount of the order. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.
   * minimum: 0
   * @return orderTaxAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "4545", required = true, value = "Total tax amount of the order. The value should be in non-negative minor units.  Example: 25 Euros should be 2500.")

  public Long getOrderTaxAmount() {
    return orderTaxAmount;
  }


  public void setOrderTaxAmount(Long orderTaxAmount) {
    if (orderTaxAmount != null && orderTaxAmount < 0) {
      throw new IllegalArgumentException("Invalid value for orderTaxAmount. Must be greater than or equal to 0.");
    }
    
    
    this.orderTaxAmount = orderTaxAmount;
  }


  public Order orderLines(List<OrderLine> orderLines) {
    
    
    
    
    this.orderLines = orderLines;
    return this;
  }

  public Order addOrderLinesItem(OrderLine orderLinesItem) {
    this.orderLines.add(orderLinesItem);
    return this;
  }

   /**
   * An array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
   * @return orderLines
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.")

  public List<OrderLine> getOrderLines() {
    return orderLines;
  }


  public void setOrderLines(List<OrderLine> orderLines) {
    
    
    
    this.orderLines = orderLines;
  }


  public Order customer(Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    
    
    
    this.customer = customer;
  }


  public Order merchantUrls(MerchantUrls merchantUrls) {
    
    
    
    
    this.merchantUrls = merchantUrls;
    return this;
  }

   /**
   * Get merchantUrls
   * @return merchantUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MerchantUrls getMerchantUrls() {
    return merchantUrls;
  }


  public void setMerchantUrls(MerchantUrls merchantUrls) {
    
    
    
    this.merchantUrls = merchantUrls;
  }


   /**
   * The HTML snippet that is used to render the checkout in an iframe.
   * @return htmlSnippet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<div id='klarna-checkout-container'><script>alert('Initializing Klarna Checkout');</script></div>", value = "The HTML snippet that is used to render the checkout in an iframe.")

  public String getHtmlSnippet() {
    return htmlSnippet;
  }




  public Order merchantReference1(String merchantReference1) {
    
    
    if (merchantReference1 != null && merchantReference1.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantReference1. Length must be greater than or equal to 0.");
    }
    
    this.merchantReference1 = merchantReference1;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference. If set, will be shown on the confirmation page as \&quot;order number\&quot; . The value is also available in the settlement files. (max 255 characters). Example: \&quot;45aa52f387871e3a210645d4\&quot;
   * @return merchantReference1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference. If set, will be shown on the confirmation page as \"order number\" . The value is also available in the settlement files. (max 255 characters). Example: \"45aa52f387871e3a210645d4\"")

  public String getMerchantReference1() {
    return merchantReference1;
  }


  public void setMerchantReference1(String merchantReference1) {
    
    
    if (merchantReference1 != null && merchantReference1.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantReference1. Length must be greater than or equal to 0.");
    }
    this.merchantReference1 = merchantReference1;
  }


  public Order merchantReference2(String merchantReference2) {
    
    
    if (merchantReference2 != null && merchantReference2.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantReference2. Length must be greater than or equal to 0.");
    }
    
    this.merchantReference2 = merchantReference2;
    return this;
  }

   /**
   * Used for storing merchant&#39;s internal order number or other reference. The value is available in the settlement files. (max 255 characters). Example: \&quot;45aa52f387871e3a210645d4\&quot;
   * @return merchantReference2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "45aa52f387871e3a210645d4", value = "Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters). Example: \"45aa52f387871e3a210645d4\"")

  public String getMerchantReference2() {
    return merchantReference2;
  }


  public void setMerchantReference2(String merchantReference2) {
    
    
    if (merchantReference2 != null && merchantReference2.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantReference2. Length must be greater than or equal to 0.");
    }
    this.merchantReference2 = merchantReference2;
  }


   /**
   * ISO 8601 datetime. The date and time when the order has been created. The format will be as follows: \&quot;yyyy-mm-ddThh:mm:ssZ\&quot;
   * @return startedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO 8601 datetime. The date and time when the order has been created. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"")

  public OffsetDateTime getStartedAt() {
    return startedAt;
  }




   /**
   * ISO 8601 datetime. The date and time when the order has been completed. The format will be as follows: \&quot;yyyy-mm-ddThh:mm:ssZ\&quot;
   * @return completedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO 8601 datetime. The date and time when the order has been completed. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"")

  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }




   /**
   * ISO 8601 datetime. The date and time when the order was last modified. The format will be as follows: \&quot;yyyy-mm-ddThh:mm:ssZ\&quot;
   * @return lastModifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO 8601 datetime. The date and time when the order was last modified. The format will be as follows: \"yyyy-mm-ddThh:mm:ssZ\"")

  public OffsetDateTime getLastModifiedAt() {
    return lastModifiedAt;
  }




  public Order options(Options options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Options getOptions() {
    return options;
  }


  public void setOptions(Options options) {
    
    
    
    this.options = options;
  }


  public Order attachment(Attachment attachment) {
    
    
    
    
    this.attachment = attachment;
    return this;
  }

   /**
   * Get attachment
   * @return attachment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Attachment getAttachment() {
    return attachment;
  }


  public void setAttachment(Attachment attachment) {
    
    
    
    this.attachment = attachment;
  }


  public Order externalPaymentMethods(List<PaymentProvider> externalPaymentMethods) {
    
    
    
    
    this.externalPaymentMethods = externalPaymentMethods;
    return this;
  }

  public Order addExternalPaymentMethodsItem(PaymentProvider externalPaymentMethodsItem) {
    if (this.externalPaymentMethods == null) {
      this.externalPaymentMethods = new ArrayList<>();
    }
    this.externalPaymentMethods.add(externalPaymentMethodsItem);
    return this;
  }

   /**
   * List of external payment methods that will be displayed as part of payment methods in the checkout.
   * @return externalPaymentMethods
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of external payment methods that will be displayed as part of payment methods in the checkout.")

  public List<PaymentProvider> getExternalPaymentMethods() {
    return externalPaymentMethods;
  }


  public void setExternalPaymentMethods(List<PaymentProvider> externalPaymentMethods) {
    
    
    
    this.externalPaymentMethods = externalPaymentMethods;
  }


  public Order externalCheckouts(List<PaymentProvider> externalCheckouts) {
    
    
    
    
    this.externalCheckouts = externalCheckouts;
    return this;
  }

  public Order addExternalCheckoutsItem(PaymentProvider externalCheckoutsItem) {
    if (this.externalCheckouts == null) {
      this.externalCheckouts = new ArrayList<>();
    }
    this.externalCheckouts.add(externalCheckoutsItem);
    return this;
  }

   /**
   * List of external checkouts that will be displayed as part of payment methods in the checkout. The image_url is required, and the image size has to be 276x48px
   * @return externalCheckouts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of external checkouts that will be displayed as part of payment methods in the checkout. The image_url is required, and the image size has to be 276x48px")

  public List<PaymentProvider> getExternalCheckouts() {
    return externalCheckouts;
  }


  public void setExternalCheckouts(List<PaymentProvider> externalCheckouts) {
    
    
    
    this.externalCheckouts = externalCheckouts;
  }


  public Order shippingCountries(List<String> shippingCountries) {
    
    
    
    
    this.shippingCountries = shippingCountries;
    return this;
  }

  public Order addShippingCountriesItem(String shippingCountriesItem) {
    if (this.shippingCountries == null) {
      this.shippingCountries = new ArrayList<>();
    }
    this.shippingCountries.add(shippingCountriesItem);
    return this;
  }

   /**
   * List of allowed shipping countries for this order in ISO-3166 alpha-2 format.  If specified, the customer will be able to change the shipping country in the checkout and you will be notified through ‘address_update’ callback or the ‘shipping_address_change’ javascript event.   If not specified then the default value will be the purchase country.  Example: look at billing_countries example.
   * @return shippingCountries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of allowed shipping countries for this order in ISO-3166 alpha-2 format.  If specified, the customer will be able to change the shipping country in the checkout and you will be notified through ‘address_update’ callback or the ‘shipping_address_change’ javascript event.   If not specified then the default value will be the purchase country.  Example: look at billing_countries example.")

  public List<String> getShippingCountries() {
    return shippingCountries;
  }


  public void setShippingCountries(List<String> shippingCountries) {
    
    
    
    this.shippingCountries = shippingCountries;
  }


  public Order shippingOptions(List<ShippingOption> shippingOptions) {
    
    
    
    
    this.shippingOptions = shippingOptions;
    return this;
  }

  public Order addShippingOptionsItem(ShippingOption shippingOptionsItem) {
    if (this.shippingOptions == null) {
      this.shippingOptions = new ArrayList<>();
    }
    this.shippingOptions.add(shippingOptionsItem);
    return this;
  }

   /**
   * A list of shipping options available for this order.
   * @return shippingOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of shipping options available for this order.")

  public List<ShippingOption> getShippingOptions() {
    return shippingOptions;
  }


  public void setShippingOptions(List<ShippingOption> shippingOptions) {
    
    
    
    this.shippingOptions = shippingOptions;
  }


  public Order merchantData(String merchantData) {
    
    
    if (merchantData != null && merchantData.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantData. Length must be greater than or equal to 0.");
    }
    
    this.merchantData = merchantData;
    return this;
  }

   /**
   * Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters).
   * @return merchantData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"marketplace_seller_info\":[{\"product_category\":\"Women's Fashion\",\"product_name\":\"Women Sweatshirt\"}]}", value = "Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters).")

  public String getMerchantData() {
    return merchantData;
  }


  public void setMerchantData(String merchantData) {
    
    
    if (merchantData != null && merchantData.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantData. Length must be greater than or equal to 0.");
    }
    this.merchantData = merchantData;
  }


  public Order gui(Gui gui) {
    
    
    
    
    this.gui = gui;
    return this;
  }

   /**
   * Get gui
   * @return gui
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Gui getGui() {
    return gui;
  }


  public void setGui(Gui gui) {
    
    
    
    this.gui = gui;
  }


  public Order merchantRequested(MerchantRequested merchantRequested) {
    
    
    
    
    this.merchantRequested = merchantRequested;
    return this;
  }

   /**
   * Get merchantRequested
   * @return merchantRequested
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MerchantRequested getMerchantRequested() {
    return merchantRequested;
  }


  public void setMerchantRequested(MerchantRequested merchantRequested) {
    
    
    
    this.merchantRequested = merchantRequested;
  }


  public Order selectedShippingOption(ShippingOption selectedShippingOption) {
    
    
    
    
    this.selectedShippingOption = selectedShippingOption;
    return this;
  }

   /**
   * Get selectedShippingOption
   * @return selectedShippingOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ShippingOption getSelectedShippingOption() {
    return selectedShippingOption;
  }


  public void setSelectedShippingOption(ShippingOption selectedShippingOption) {
    
    
    
    this.selectedShippingOption = selectedShippingOption;
  }


  public Order recurring(Boolean recurring) {
    
    
    
    
    this.recurring = recurring;
    return this;
  }

   /**
   * Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false  Depending on specified country, recurring could be used for the following payment methods: Pay Later, Direct Debit, Card.
   * @return recurring
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false  Depending on specified country, recurring could be used for the following payment methods: Pay Later, Direct Debit, Card.")

  public Boolean getRecurring() {
    return recurring;
  }


  public void setRecurring(Boolean recurring) {
    
    
    
    this.recurring = recurring;
  }


   /**
   * Token to be used when creating recurring orders.
   * @return recurringToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Token to be used when creating recurring orders.")

  public String getRecurringToken() {
    return recurringToken;
  }




   /**
   * Description to be added to the recurring order.
   * @return recurringDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description to be added to the recurring order.")

  public String getRecurringDescription() {
    return recurringDescription;
  }




  public Order billingCountries(List<String> billingCountries) {
    
    
    
    
    this.billingCountries = billingCountries;
    return this;
  }

  public Order addBillingCountriesItem(String billingCountriesItem) {
    if (this.billingCountries == null) {
      this.billingCountries = new ArrayList<>();
    }
    this.billingCountries.add(billingCountriesItem);
    return this;
  }

   /**
   * List of allowed billing countries for this order. If specified, the customer will be able to change the billing country in the checkout and you will be notified through ‘country_change’ callback or the ‘billing_address_change’ javascript event. If not specified but shipping_countries is specified, will use same values as shipping_countries. If not specified and shipping_countries is not specified, then the default value will be the purchase country.  Example: [\&quot;AD\&quot;, \&quot;AE\&quot;, \&quot;AG\&quot;, \&quot;AI\&quot;, \&quot;AL\&quot;, \&quot;AM\&quot;, \&quot;AQ\&quot;, \&quot;AR\&quot;, \&quot;AS\&quot;, \&quot;AT\&quot;, \&quot;AU\&quot;, \&quot;AW\&quot;, \&quot;AX\&quot;, \&quot;AZ\&quot;, \&quot;BA\&quot;, \&quot;BB\&quot;, \&quot;BD\&quot;, \&quot;BE\&quot;, \&quot;BF\&quot;, \&quot;BG\&quot;, \&quot;BH\&quot;, \&quot;BJ\&quot;, \&quot;BL\&quot;, \&quot;BM\&quot;, \&quot;BN\&quot;, \&quot;BO\&quot;, \&quot;BQ\&quot;, \&quot;BR\&quot;, \&quot;BS\&quot;, \&quot;BT\&quot;, \&quot;BW\&quot;, \&quot;BY\&quot;, \&quot;BZ\&quot;, \&quot;CA\&quot;, \&quot;CF\&quot;, \&quot;CH\&quot;, \&quot;CI\&quot;, \&quot;CK\&quot;, \&quot;CL\&quot;, \&quot;CM\&quot;, \&quot;CN\&quot;, \&quot;CO\&quot;, \&quot;CR\&quot;, \&quot;CU\&quot;, \&quot;CV\&quot;, \&quot;CW\&quot;, \&quot;CX\&quot;, \&quot;CY\&quot;, \&quot;CZ\&quot;, \&quot;DE\&quot;, \&quot;DJ\&quot;, \&quot;DK\&quot;, \&quot;DM\&quot;, \&quot;DO\&quot;, \&quot;DZ\&quot;, \&quot;EC\&quot;, \&quot;EE\&quot;, \&quot;EG\&quot;, \&quot;ER\&quot;, \&quot;ES\&quot;, \&quot;ET\&quot;, \&quot;FI\&quot;, \&quot;FJ\&quot;, \&quot;FK\&quot;, \&quot;FM\&quot;, \&quot;FO\&quot;, \&quot;FR\&quot;, \&quot;GA\&quot;, \&quot;GB\&quot;, \&quot;GD\&quot;, \&quot;GE\&quot;, \&quot;GF\&quot;, \&quot;GG\&quot;, \&quot;GH\&quot;, \&quot;GI\&quot;, \&quot;GL\&quot;, \&quot;GM\&quot;, \&quot;GN\&quot;, \&quot;GP\&quot;, \&quot;GR\&quot;, \&quot;GS\&quot;, \&quot;GT\&quot;, \&quot;GU\&quot;, \&quot;GY\&quot;, \&quot;HK\&quot;, \&quot;HN\&quot;, \&quot;HR\&quot;, \&quot;HU\&quot;, \&quot;ID\&quot;, \&quot;IE\&quot;, \&quot;IL\&quot;, \&quot;IM\&quot;, \&quot;IN\&quot;, \&quot;IS\&quot;, \&quot;IT\&quot;, \&quot;JE\&quot;, \&quot;JM\&quot;, \&quot;JO\&quot;, \&quot;JP\&quot;, \&quot;KE\&quot;, \&quot;KG\&quot;, \&quot;KI\&quot;, \&quot;KM\&quot;, \&quot;KN\&quot;, \&quot;KR\&quot;, \&quot;KW\&quot;, \&quot;KY\&quot;, \&quot;KZ\&quot;, \&quot;LA\&quot;, \&quot;LA\&quot;, \&quot;LB\&quot;, \&quot;LC\&quot;, \&quot;LI\&quot;, \&quot;LK\&quot;, \&quot;LR\&quot;, \&quot;LS\&quot;, \&quot;LT\&quot;, \&quot;LU\&quot;, \&quot;LV\&quot;, \&quot;MA\&quot;, \&quot;MC\&quot;, \&quot;MD\&quot;, \&quot;ME\&quot;, \&quot;MF\&quot;, \&quot;MG\&quot;, \&quot;MH\&quot;, \&quot;MK\&quot;, \&quot;MK\&quot;, \&quot;ML\&quot;, \&quot;MM\&quot;, \&quot;MN\&quot;, \&quot;MO\&quot;, \&quot;MP\&quot;, \&quot;MQ\&quot;, \&quot;MR\&quot;, \&quot;MT\&quot;, \&quot;MU\&quot;, \&quot;MV\&quot;, \&quot;MW\&quot;, \&quot;MX\&quot;, \&quot;MY\&quot;, \&quot;MZ\&quot;, \&quot;NA\&quot;, \&quot;NC\&quot;, \&quot;NE\&quot;, \&quot;NF\&quot;, \&quot;NG\&quot;, \&quot;NI\&quot;, \&quot;NL\&quot;, \&quot;NO\&quot;, \&quot;NP\&quot;, \&quot;NR\&quot;, \&quot;NU\&quot;, \&quot;NZ\&quot;, \&quot;OM\&quot;, \&quot;PA\&quot;, \&quot;PE\&quot;, \&quot;PF\&quot;, \&quot;PG\&quot;, \&quot;PH\&quot;, \&quot;PK\&quot;, \&quot;PL\&quot;, \&quot;PM\&quot;, \&quot;PR\&quot;, \&quot;PS\&quot;, \&quot;PT\&quot;, \&quot;PW\&quot;, \&quot;PY\&quot;, \&quot;QA\&quot;, \&quot;RE\&quot;, \&quot;RO\&quot;, \&quot;RS\&quot;, \&quot;RU\&quot;, \&quot;RW\&quot;, \&quot;SA\&quot;, \&quot;SB\&quot;, \&quot;SC\&quot;, \&quot;SE\&quot;, \&quot;SG\&quot;, \&quot;SH\&quot;, \&quot;SI\&quot;, \&quot;SJ\&quot;, \&quot;SK\&quot;, \&quot;SL\&quot;, \&quot;SM\&quot;, \&quot;SN\&quot;, \&quot;SR\&quot;, \&quot;ST\&quot;, \&quot;SV\&quot;, \&quot;SX\&quot;, \&quot;SZ\&quot;, \&quot;TC\&quot;, \&quot;TF\&quot;, \&quot;TG\&quot;, \&quot;TH\&quot;, \&quot;TJ\&quot;, \&quot;TK\&quot;, \&quot;TL\&quot;, \&quot;TO\&quot;, \&quot;TR\&quot;, \&quot;TT\&quot;, \&quot;TV\&quot;, \&quot;TW\&quot;, \&quot;TZ\&quot;, \&quot;UA\&quot;, \&quot;UG\&quot;, \&quot;UM\&quot;, \&quot;US\&quot;, \&quot;UY\&quot;, \&quot;UZ\&quot;, \&quot;VA\&quot;, \&quot;VC\&quot;, \&quot;VG\&quot;, \&quot;VI\&quot;, \&quot;VN\&quot;, \&quot;VU\&quot;, \&quot;WF\&quot;, \&quot;WS\&quot;, \&quot;XK\&quot;, \&quot;YT\&quot;, \&quot;ZA\&quot;, \&quot;ZM\&quot;, \&quot;ZW\&quot;]\&quot;
   * @return billingCountries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of allowed billing countries for this order. If specified, the customer will be able to change the billing country in the checkout and you will be notified through ‘country_change’ callback or the ‘billing_address_change’ javascript event. If not specified but shipping_countries is specified, will use same values as shipping_countries. If not specified and shipping_countries is not specified, then the default value will be the purchase country.  Example: [\"AD\", \"AE\", \"AG\", \"AI\", \"AL\", \"AM\", \"AQ\", \"AR\", \"AS\", \"AT\", \"AU\", \"AW\", \"AX\", \"AZ\", \"BA\", \"BB\", \"BD\", \"BE\", \"BF\", \"BG\", \"BH\", \"BJ\", \"BL\", \"BM\", \"BN\", \"BO\", \"BQ\", \"BR\", \"BS\", \"BT\", \"BW\", \"BY\", \"BZ\", \"CA\", \"CF\", \"CH\", \"CI\", \"CK\", \"CL\", \"CM\", \"CN\", \"CO\", \"CR\", \"CU\", \"CV\", \"CW\", \"CX\", \"CY\", \"CZ\", \"DE\", \"DJ\", \"DK\", \"DM\", \"DO\", \"DZ\", \"EC\", \"EE\", \"EG\", \"ER\", \"ES\", \"ET\", \"FI\", \"FJ\", \"FK\", \"FM\", \"FO\", \"FR\", \"GA\", \"GB\", \"GD\", \"GE\", \"GF\", \"GG\", \"GH\", \"GI\", \"GL\", \"GM\", \"GN\", \"GP\", \"GR\", \"GS\", \"GT\", \"GU\", \"GY\", \"HK\", \"HN\", \"HR\", \"HU\", \"ID\", \"IE\", \"IL\", \"IM\", \"IN\", \"IS\", \"IT\", \"JE\", \"JM\", \"JO\", \"JP\", \"KE\", \"KG\", \"KI\", \"KM\", \"KN\", \"KR\", \"KW\", \"KY\", \"KZ\", \"LA\", \"LA\", \"LB\", \"LC\", \"LI\", \"LK\", \"LR\", \"LS\", \"LT\", \"LU\", \"LV\", \"MA\", \"MC\", \"MD\", \"ME\", \"MF\", \"MG\", \"MH\", \"MK\", \"MK\", \"ML\", \"MM\", \"MN\", \"MO\", \"MP\", \"MQ\", \"MR\", \"MT\", \"MU\", \"MV\", \"MW\", \"MX\", \"MY\", \"MZ\", \"NA\", \"NC\", \"NE\", \"NF\", \"NG\", \"NI\", \"NL\", \"NO\", \"NP\", \"NR\", \"NU\", \"NZ\", \"OM\", \"PA\", \"PE\", \"PF\", \"PG\", \"PH\", \"PK\", \"PL\", \"PM\", \"PR\", \"PS\", \"PT\", \"PW\", \"PY\", \"QA\", \"RE\", \"RO\", \"RS\", \"RU\", \"RW\", \"SA\", \"SB\", \"SC\", \"SE\", \"SG\", \"SH\", \"SI\", \"SJ\", \"SK\", \"SL\", \"SM\", \"SN\", \"SR\", \"ST\", \"SV\", \"SX\", \"SZ\", \"TC\", \"TF\", \"TG\", \"TH\", \"TJ\", \"TK\", \"TL\", \"TO\", \"TR\", \"TT\", \"TV\", \"TW\", \"TZ\", \"UA\", \"UG\", \"UM\", \"US\", \"UY\", \"UZ\", \"VA\", \"VC\", \"VG\", \"VI\", \"VN\", \"VU\", \"WF\", \"WS\", \"XK\", \"YT\", \"ZA\", \"ZM\", \"ZW\"]\"")

  public List<String> getBillingCountries() {
    return billingCountries;
  }


  public void setBillingCountries(List<String> billingCountries) {
    
    
    
    this.billingCountries = billingCountries;
  }


  public Order discountLines(List<DiscountLine> discountLines) {
    
    
    
    
    this.discountLines = discountLines;
    return this;
  }

  public Order addDiscountLinesItem(DiscountLine discountLinesItem) {
    if (this.discountLines == null) {
      this.discountLines = new ArrayList<>();
    }
    this.discountLines.add(discountLinesItem);
    return this;
  }

   /**
   * List of discounts applied to this order via the KCO discount-service
   * @return discountLines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of discounts applied to this order via the KCO discount-service")

  public List<DiscountLine> getDiscountLines() {
    return discountLines;
  }


  public void setDiscountLines(List<DiscountLine> discountLines) {
    
    
    
    this.discountLines = discountLines;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Order instance itself
   */
  public Order putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.tags, order.tags) &&
        Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.name, order.name) &&
        Objects.equals(this.purchaseCountry, order.purchaseCountry) &&
        Objects.equals(this.purchaseCurrency, order.purchaseCurrency) &&
        Objects.equals(this.locale, order.locale) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.billingAddress, order.billingAddress) &&
        Objects.equals(this.shippingAddress, order.shippingAddress) &&
        Objects.equals(this.orderAmount, order.orderAmount) &&
        Objects.equals(this.orderTaxAmount, order.orderTaxAmount) &&
        Objects.equals(this.orderLines, order.orderLines) &&
        Objects.equals(this.customer, order.customer) &&
        Objects.equals(this.merchantUrls, order.merchantUrls) &&
        Objects.equals(this.htmlSnippet, order.htmlSnippet) &&
        Objects.equals(this.merchantReference1, order.merchantReference1) &&
        Objects.equals(this.merchantReference2, order.merchantReference2) &&
        Objects.equals(this.startedAt, order.startedAt) &&
        Objects.equals(this.completedAt, order.completedAt) &&
        Objects.equals(this.lastModifiedAt, order.lastModifiedAt) &&
        Objects.equals(this.options, order.options) &&
        Objects.equals(this.attachment, order.attachment) &&
        Objects.equals(this.externalPaymentMethods, order.externalPaymentMethods) &&
        Objects.equals(this.externalCheckouts, order.externalCheckouts) &&
        Objects.equals(this.shippingCountries, order.shippingCountries) &&
        Objects.equals(this.shippingOptions, order.shippingOptions) &&
        Objects.equals(this.merchantData, order.merchantData) &&
        Objects.equals(this.gui, order.gui) &&
        Objects.equals(this.merchantRequested, order.merchantRequested) &&
        Objects.equals(this.selectedShippingOption, order.selectedShippingOption) &&
        Objects.equals(this.recurring, order.recurring) &&
        Objects.equals(this.recurringToken, order.recurringToken) &&
        Objects.equals(this.recurringDescription, order.recurringDescription) &&
        Objects.equals(this.billingCountries, order.billingCountries) &&
        Objects.equals(this.discountLines, order.discountLines)&&
        Objects.equals(this.additionalProperties, order.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, orderId, name, purchaseCountry, purchaseCurrency, locale, status, billingAddress, shippingAddress, orderAmount, orderTaxAmount, orderLines, customer, merchantUrls, htmlSnippet, merchantReference1, merchantReference2, startedAt, completedAt, lastModifiedAt, options, attachment, externalPaymentMethods, externalCheckouts, shippingCountries, shippingOptions, merchantData, gui, merchantRequested, selectedShippingOption, recurring, recurringToken, recurringDescription, billingCountries, discountLines, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purchaseCountry: ").append(toIndentedString(purchaseCountry)).append("\n");
    sb.append("    purchaseCurrency: ").append(toIndentedString(purchaseCurrency)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    orderAmount: ").append(toIndentedString(orderAmount)).append("\n");
    sb.append("    orderTaxAmount: ").append(toIndentedString(orderTaxAmount)).append("\n");
    sb.append("    orderLines: ").append(toIndentedString(orderLines)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    merchantUrls: ").append(toIndentedString(merchantUrls)).append("\n");
    sb.append("    htmlSnippet: ").append(toIndentedString(htmlSnippet)).append("\n");
    sb.append("    merchantReference1: ").append(toIndentedString(merchantReference1)).append("\n");
    sb.append("    merchantReference2: ").append(toIndentedString(merchantReference2)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    externalPaymentMethods: ").append(toIndentedString(externalPaymentMethods)).append("\n");
    sb.append("    externalCheckouts: ").append(toIndentedString(externalCheckouts)).append("\n");
    sb.append("    shippingCountries: ").append(toIndentedString(shippingCountries)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    gui: ").append(toIndentedString(gui)).append("\n");
    sb.append("    merchantRequested: ").append(toIndentedString(merchantRequested)).append("\n");
    sb.append("    selectedShippingOption: ").append(toIndentedString(selectedShippingOption)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    recurringToken: ").append(toIndentedString(recurringToken)).append("\n");
    sb.append("    recurringDescription: ").append(toIndentedString(recurringDescription)).append("\n");
    sb.append("    billingCountries: ").append(toIndentedString(billingCountries)).append("\n");
    sb.append("    discountLines: ").append(toIndentedString(discountLines)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("order_id");
    openapiFields.add("name");
    openapiFields.add("purchase_country");
    openapiFields.add("purchase_currency");
    openapiFields.add("locale");
    openapiFields.add("status");
    openapiFields.add("billing_address");
    openapiFields.add("shipping_address");
    openapiFields.add("order_amount");
    openapiFields.add("order_tax_amount");
    openapiFields.add("order_lines");
    openapiFields.add("customer");
    openapiFields.add("merchant_urls");
    openapiFields.add("html_snippet");
    openapiFields.add("merchant_reference1");
    openapiFields.add("merchant_reference2");
    openapiFields.add("started_at");
    openapiFields.add("completed_at");
    openapiFields.add("last_modified_at");
    openapiFields.add("options");
    openapiFields.add("attachment");
    openapiFields.add("external_payment_methods");
    openapiFields.add("external_checkouts");
    openapiFields.add("shipping_countries");
    openapiFields.add("shipping_options");
    openapiFields.add("merchant_data");
    openapiFields.add("gui");
    openapiFields.add("merchant_requested");
    openapiFields.add("selected_shipping_option");
    openapiFields.add("recurring");
    openapiFields.add("recurring_token");
    openapiFields.add("recurring_description");
    openapiFields.add("billing_countries");
    openapiFields.add("discount_lines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("purchase_country");
    openapiRequiredFields.add("purchase_currency");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("order_amount");
    openapiRequiredFields.add("order_tax_amount");
    openapiRequiredFields.add("order_lines");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Order
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Order.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("purchase_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_country").toString()));
      }
      if (!jsonObj.get("purchase_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_currency").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("billing_address"));
      }
      // validate the optional field `shipping_address`
      if (jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("shipping_address"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("order_lines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_lines` to be an array in the JSON string but got `%s`", jsonObj.get("order_lines").toString()));
      }

      JsonArray jsonArrayorderLines = jsonObj.getAsJsonArray("order_lines");
      // validate the required field `order_lines` (array)
      for (int i = 0; i < jsonArrayorderLines.size(); i++) {
        OrderLine.validateJsonObject(jsonArrayorderLines.get(i).getAsJsonObject());
      };
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      // validate the optional field `merchant_urls`
      if (jsonObj.get("merchant_urls") != null && !jsonObj.get("merchant_urls").isJsonNull()) {
        MerchantUrls.validateJsonObject(jsonObj.getAsJsonObject("merchant_urls"));
      }
      if ((jsonObj.get("html_snippet") != null && !jsonObj.get("html_snippet").isJsonNull()) && !jsonObj.get("html_snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html_snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html_snippet").toString()));
      }
      if ((jsonObj.get("merchant_reference1") != null && !jsonObj.get("merchant_reference1").isJsonNull()) && !jsonObj.get("merchant_reference1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_reference1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_reference1").toString()));
      }
      if ((jsonObj.get("merchant_reference2") != null && !jsonObj.get("merchant_reference2").isJsonNull()) && !jsonObj.get("merchant_reference2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_reference2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_reference2").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        Options.validateJsonObject(jsonObj.getAsJsonObject("options"));
      }
      // validate the optional field `attachment`
      if (jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) {
        Attachment.validateJsonObject(jsonObj.getAsJsonObject("attachment"));
      }
      if (jsonObj.get("external_payment_methods") != null && !jsonObj.get("external_payment_methods").isJsonNull()) {
        JsonArray jsonArrayexternalPaymentMethods = jsonObj.getAsJsonArray("external_payment_methods");
        if (jsonArrayexternalPaymentMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external_payment_methods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_payment_methods` to be an array in the JSON string but got `%s`", jsonObj.get("external_payment_methods").toString()));
          }

          // validate the optional field `external_payment_methods` (array)
          for (int i = 0; i < jsonArrayexternalPaymentMethods.size(); i++) {
            PaymentProvider.validateJsonObject(jsonArrayexternalPaymentMethods.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("external_checkouts") != null && !jsonObj.get("external_checkouts").isJsonNull()) {
        JsonArray jsonArrayexternalCheckouts = jsonObj.getAsJsonArray("external_checkouts");
        if (jsonArrayexternalCheckouts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("external_checkouts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `external_checkouts` to be an array in the JSON string but got `%s`", jsonObj.get("external_checkouts").toString()));
          }

          // validate the optional field `external_checkouts` (array)
          for (int i = 0; i < jsonArrayexternalCheckouts.size(); i++) {
            PaymentProvider.validateJsonObject(jsonArrayexternalCheckouts.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("shipping_countries") != null && !jsonObj.get("shipping_countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_countries` to be an array in the JSON string but got `%s`", jsonObj.get("shipping_countries").toString()));
      }
      if (jsonObj.get("shipping_options") != null && !jsonObj.get("shipping_options").isJsonNull()) {
        JsonArray jsonArrayshippingOptions = jsonObj.getAsJsonArray("shipping_options");
        if (jsonArrayshippingOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipping_options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_options` to be an array in the JSON string but got `%s`", jsonObj.get("shipping_options").toString()));
          }

          // validate the optional field `shipping_options` (array)
          for (int i = 0; i < jsonArrayshippingOptions.size(); i++) {
            ShippingOption.validateJsonObject(jsonArrayshippingOptions.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("merchant_data") != null && !jsonObj.get("merchant_data").isJsonNull()) && !jsonObj.get("merchant_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_data").toString()));
      }
      // validate the optional field `gui`
      if (jsonObj.get("gui") != null && !jsonObj.get("gui").isJsonNull()) {
        Gui.validateJsonObject(jsonObj.getAsJsonObject("gui"));
      }
      // validate the optional field `merchant_requested`
      if (jsonObj.get("merchant_requested") != null && !jsonObj.get("merchant_requested").isJsonNull()) {
        MerchantRequested.validateJsonObject(jsonObj.getAsJsonObject("merchant_requested"));
      }
      // validate the optional field `selected_shipping_option`
      if (jsonObj.get("selected_shipping_option") != null && !jsonObj.get("selected_shipping_option").isJsonNull()) {
        ShippingOption.validateJsonObject(jsonObj.getAsJsonObject("selected_shipping_option"));
      }
      if ((jsonObj.get("recurring_token") != null && !jsonObj.get("recurring_token").isJsonNull()) && !jsonObj.get("recurring_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurring_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurring_token").toString()));
      }
      if ((jsonObj.get("recurring_description") != null && !jsonObj.get("recurring_description").isJsonNull()) && !jsonObj.get("recurring_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurring_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurring_description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("billing_countries") != null && !jsonObj.get("billing_countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_countries` to be an array in the JSON string but got `%s`", jsonObj.get("billing_countries").toString()));
      }
      if (jsonObj.get("discount_lines") != null && !jsonObj.get("discount_lines").isJsonNull()) {
        JsonArray jsonArraydiscountLines = jsonObj.getAsJsonArray("discount_lines");
        if (jsonArraydiscountLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discount_lines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discount_lines` to be an array in the JSON string but got `%s`", jsonObj.get("discount_lines").toString()));
          }

          // validate the optional field `discount_lines` (array)
          for (int i = 0; i < jsonArraydiscountLines.size(); i++) {
            DiscountLine.validateJsonObject(jsonArraydiscountLines.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Order instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Order given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Order
  * @throws IOException if the JSON string is invalid with respect to Order
  */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

 /**
  * Convert an instance of Order to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Klarna Checkout API V3
 * The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PaymentProvider
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentProvider {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private Long fee;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<String> countries = null;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private String redirectUrl;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public PaymentProvider() {
  }

  public PaymentProvider description(String description) {
    
    
    if (description != null && description.length() < 0) {
      throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 0.");
    }
    
    this.description = description;
    return this;
  }

   /**
   * Short description of the payment method. This is displayed below the selected payment method. (max 500 characters)
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "an American company operating a worldwide online payments system", value = "Short description of the payment method. This is displayed below the selected payment method. (max 500 characters)")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    if (description != null && description.length() < 0) {
      throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 0.");
    }
    this.description = description;
  }


  public PaymentProvider name(String name) {
    
    
    if (name != null && name.length() < 0) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 0.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * The name of the payment provider. (max 255 characters)
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PayhereUs", required = true, value = "The name of the payment provider. (max 255 characters)")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 0) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 0.");
    }
    this.name = name;
  }


  public PaymentProvider fee(Long fee) {
    
    
    
    
    this.fee = fee;
    return this;
  }

   /**
   * Minor units. Includes tax.
   * @return fee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minor units. Includes tax.")

  public Long getFee() {
    return fee;
  }


  public void setFee(Long fee) {
    
    
    
    this.fee = fee;
  }


  public PaymentProvider countries(List<String> countries) {
    
    
    
    
    this.countries = countries;
    return this;
  }

  public PaymentProvider addCountriesItem(String countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

   /**
   * If specified, limits the method to the listed countries (alpha 2 codes).
   * @return countries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If specified, limits the method to the listed countries (alpha 2 codes).")

  public List<String> getCountries() {
    return countries;
  }


  public void setCountries(List<String> countries) {
    
    
    
    this.countries = countries;
  }


  public PaymentProvider label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * Controls label of buy button&lt;ul&gt;&lt;li&gt;continue&lt;/li&gt;&lt;li&gt;complete&lt;/li&gt;&lt;/ul&gt;
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "continue", value = "Controls label of buy button<ul><li>continue</li><li>complete</li></ul>")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public PaymentProvider redirectUrl(String redirectUrl) {
    
    
    if (redirectUrl != null && redirectUrl.length() < 7) {
      throw new IllegalArgumentException("Invalid value for redirectUrl. Length must be greater than or equal to 7.");
    }
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * URL to redirect to. (must be https, min 7, max 2000 characters)
   * @return redirectUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://www.example.com/us/start", required = true, value = "URL to redirect to. (must be https, min 7, max 2000 characters)")

  public String getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(String redirectUrl) {
    
    
    if (redirectUrl != null && redirectUrl.length() < 7) {
      throw new IllegalArgumentException("Invalid value for redirectUrl. Length must be greater than or equal to 7.");
    }
    this.redirectUrl = redirectUrl;
  }


  public PaymentProvider imageUrl(String imageUrl) {
    
    
    if (imageUrl != null && imageUrl.length() < 0) {
      throw new IllegalArgumentException("Invalid value for imageUrl. Length must be greater than or equal to 0.");
    }
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * URL to an image to display. (must be https, max 2000 characters)
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.exampleobjects.com/product-image-1200x1200.jpg", value = "URL to an image to display. (must be https, max 2000 characters)")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    
    
    if (imageUrl != null && imageUrl.length() < 0) {
      throw new IllegalArgumentException("Invalid value for imageUrl. Length must be greater than or equal to 0.");
    }
    this.imageUrl = imageUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentProvider instance itself
   */
  public PaymentProvider putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentProvider paymentProvider = (PaymentProvider) o;
    return Objects.equals(this.description, paymentProvider.description) &&
        Objects.equals(this.name, paymentProvider.name) &&
        Objects.equals(this.fee, paymentProvider.fee) &&
        Objects.equals(this.countries, paymentProvider.countries) &&
        Objects.equals(this.label, paymentProvider.label) &&
        Objects.equals(this.redirectUrl, paymentProvider.redirectUrl) &&
        Objects.equals(this.imageUrl, paymentProvider.imageUrl)&&
        Objects.equals(this.additionalProperties, paymentProvider.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, fee, countries, label, redirectUrl, imageUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentProvider {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("fee");
    openapiFields.add("countries");
    openapiFields.add("label");
    openapiFields.add("redirect_url");
    openapiFields.add("image_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("redirect_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentProvider
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentProvider is not found in the empty JSON string", PaymentProvider.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentProvider.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("redirect_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_url").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentProvider>() {
           @Override
           public void write(JsonWriter out, PaymentProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentProvider read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentProvider instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentProvider given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentProvider
  * @throws IOException if the JSON string is invalid with respect to PaymentProvider
  */
  public static PaymentProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentProvider.class);
  }

 /**
  * Convert an instance of PaymentProvider to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


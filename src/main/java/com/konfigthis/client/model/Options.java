/*
 * Klarna Checkout API V3
 * The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Checkbox;
import com.konfigthis.client.model.CheckboxV2;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Options
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Options {
  public static final String SERIALIZED_NAME_REQUIRE_VALIDATE_CALLBACK_SUCCESS = "require_validate_callback_success";
  @SerializedName(SERIALIZED_NAME_REQUIRE_VALIDATE_CALLBACK_SUCCESS)
  private Boolean requireValidateCallbackSuccess;

  public static final String SERIALIZED_NAME_ACQUIRING_CHANNEL = "acquiring_channel";
  @SerializedName(SERIALIZED_NAME_ACQUIRING_CHANNEL)
  private String acquiringChannel;

  public static final String SERIALIZED_NAME_VAT_REMOVED = "vat_removed";
  @SerializedName(SERIALIZED_NAME_VAT_REMOVED)
  private Boolean vatRemoved;

  public static final String SERIALIZED_NAME_ALLOW_SEPARATE_SHIPPING_ADDRESS = "allow_separate_shipping_address";
  @SerializedName(SERIALIZED_NAME_ALLOW_SEPARATE_SHIPPING_ADDRESS)
  private Boolean allowSeparateShippingAddress;

  public static final String SERIALIZED_NAME_COLOR_BUTTON = "color_button";
  @SerializedName(SERIALIZED_NAME_COLOR_BUTTON)
  private String colorButton;

  public static final String SERIALIZED_NAME_COLOR_BUTTON_TEXT = "color_button_text";
  @SerializedName(SERIALIZED_NAME_COLOR_BUTTON_TEXT)
  private String colorButtonText;

  public static final String SERIALIZED_NAME_COLOR_CHECKBOX = "color_checkbox";
  @SerializedName(SERIALIZED_NAME_COLOR_CHECKBOX)
  private String colorCheckbox;

  public static final String SERIALIZED_NAME_COLOR_CHECKBOX_CHECKMARK = "color_checkbox_checkmark";
  @SerializedName(SERIALIZED_NAME_COLOR_CHECKBOX_CHECKMARK)
  private String colorCheckboxCheckmark;

  public static final String SERIALIZED_NAME_COLOR_HEADER = "color_header";
  @SerializedName(SERIALIZED_NAME_COLOR_HEADER)
  private String colorHeader;

  public static final String SERIALIZED_NAME_COLOR_LINK = "color_link";
  @SerializedName(SERIALIZED_NAME_COLOR_LINK)
  private String colorLink;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH_MANDATORY = "date_of_birth_mandatory";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH_MANDATORY)
  private Boolean dateOfBirthMandatory;

  public static final String SERIALIZED_NAME_SHIPPING_DETAILS = "shipping_details";
  @SerializedName(SERIALIZED_NAME_SHIPPING_DETAILS)
  private String shippingDetails;

  public static final String SERIALIZED_NAME_TITLE_MANDATORY = "title_mandatory";
  @SerializedName(SERIALIZED_NAME_TITLE_MANDATORY)
  private Boolean titleMandatory;

  public static final String SERIALIZED_NAME_ADDITIONAL_CHECKBOX = "additional_checkbox";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CHECKBOX)
  private Checkbox additionalCheckbox;

  public static final String SERIALIZED_NAME_NATIONAL_IDENTIFICATION_NUMBER_MANDATORY = "national_identification_number_mandatory";
  @SerializedName(SERIALIZED_NAME_NATIONAL_IDENTIFICATION_NUMBER_MANDATORY)
  private Boolean nationalIdentificationNumberMandatory;

  public static final String SERIALIZED_NAME_ADDITIONAL_MERCHANT_TERMS = "additional_merchant_terms";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MERCHANT_TERMS)
  private String additionalMerchantTerms;

  public static final String SERIALIZED_NAME_PHONE_MANDATORY = "phone_mandatory";
  @SerializedName(SERIALIZED_NAME_PHONE_MANDATORY)
  private Boolean phoneMandatory;

  public static final String SERIALIZED_NAME_RADIUS_BORDER = "radius_border";
  @SerializedName(SERIALIZED_NAME_RADIUS_BORDER)
  private String radiusBorder;

  public static final String SERIALIZED_NAME_ALLOWED_CUSTOMER_TYPES = "allowed_customer_types";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CUSTOMER_TYPES)
  private List<String> allowedCustomerTypes = null;

  public static final String SERIALIZED_NAME_SHOW_SUBTOTAL_DETAIL = "show_subtotal_detail";
  @SerializedName(SERIALIZED_NAME_SHOW_SUBTOTAL_DETAIL)
  private Boolean showSubtotalDetail;

  public static final String SERIALIZED_NAME_ADDITIONAL_CHECKBOXES = "additional_checkboxes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CHECKBOXES)
  private List<CheckboxV2> additionalCheckboxes = null;

  public static final String SERIALIZED_NAME_VERIFY_NATIONAL_IDENTIFICATION_NUMBER = "verify_national_identification_number";
  @SerializedName(SERIALIZED_NAME_VERIFY_NATIONAL_IDENTIFICATION_NUMBER)
  private Boolean verifyNationalIdentificationNumber;

  public static final String SERIALIZED_NAME_AUTO_CAPTURE = "auto_capture";
  @SerializedName(SERIALIZED_NAME_AUTO_CAPTURE)
  private Boolean autoCapture;

  public static final String SERIALIZED_NAME_REQUIRE_CLIENT_VALIDATION = "require_client_validation";
  @SerializedName(SERIALIZED_NAME_REQUIRE_CLIENT_VALIDATION)
  private Boolean requireClientValidation;

  public static final String SERIALIZED_NAME_ENABLE_DISCOUNT_MODULE = "enable_discount_module";
  @SerializedName(SERIALIZED_NAME_ENABLE_DISCOUNT_MODULE)
  private Boolean enableDiscountModule;

  public static final String SERIALIZED_NAME_SHOW_VAT_REGISTRATION_NUMBER_FIELD = "show_vat_registration_number_field";
  @SerializedName(SERIALIZED_NAME_SHOW_VAT_REGISTRATION_NUMBER_FIELD)
  private Boolean showVatRegistrationNumberField;

  public Options() {
  }

  public Options requireValidateCallbackSuccess(Boolean requireValidateCallbackSuccess) {
    
    
    
    
    this.requireValidateCallbackSuccess = requireValidateCallbackSuccess;
    return this;
  }

   /**
   * If true, validate callback must get a positive response to not stop purchase. Default: false.
   * @return requireValidateCallbackSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, validate callback must get a positive response to not stop purchase. Default: false.")

  public Boolean getRequireValidateCallbackSuccess() {
    return requireValidateCallbackSuccess;
  }


  public void setRequireValidateCallbackSuccess(Boolean requireValidateCallbackSuccess) {
    
    
    
    this.requireValidateCallbackSuccess = requireValidateCallbackSuccess;
  }


  public Options acquiringChannel(String acquiringChannel) {
    
    
    
    
    this.acquiringChannel = acquiringChannel;
    return this;
  }

   /**
   * Acquiring channel for the order. The possible values are: &lt;ul&gt;&lt;li&gt;&lt;em&gt;ECOMMERCE for \&quot;E-commerce\&quot;&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;IN_STORE for \&quot;Purchase in boutique\&quot;&lt;/em&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;Default : ECOMMERCE&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;
   * @return acquiringChannel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Acquiring channel for the order. The possible values are: <ul><li><em>ECOMMERCE for \"E-commerce\"</em></li><li><em>IN_STORE for \"Purchase in boutique\"</em></li><li><em>Default : ECOMMERCE</em></li></ul>")

  public String getAcquiringChannel() {
    return acquiringChannel;
  }


  public void setAcquiringChannel(String acquiringChannel) {
    
    
    
    this.acquiringChannel = acquiringChannel;
  }


  public Options vatRemoved(Boolean vatRemoved) {
    
    
    
    
    this.vatRemoved = vatRemoved;
    return this;
  }

   /**
   * If true, VAT is not displayed in Checkout&#39;s Order Summary page.
   * @return vatRemoved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, VAT is not displayed in Checkout's Order Summary page.")

  public Boolean getVatRemoved() {
    return vatRemoved;
  }


  public void setVatRemoved(Boolean vatRemoved) {
    
    
    
    this.vatRemoved = vatRemoved;
  }


  public Options allowSeparateShippingAddress(Boolean allowSeparateShippingAddress) {
    
    
    
    
    this.allowSeparateShippingAddress = allowSeparateShippingAddress;
    return this;
  }

   /**
   * If true, the consumer can enter different billing and shipping addresses. Default: false, except for purchase_country DE where default is: true
   * @return allowSeparateShippingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the consumer can enter different billing and shipping addresses. Default: false, except for purchase_country DE where default is: true")

  public Boolean getAllowSeparateShippingAddress() {
    return allowSeparateShippingAddress;
  }


  public void setAllowSeparateShippingAddress(Boolean allowSeparateShippingAddress) {
    
    
    
    this.allowSeparateShippingAddress = allowSeparateShippingAddress;
  }


  public Options colorButton(String colorButton) {
    
    
    
    
    this.colorButton = colorButton;
    return this;
  }

   /**
   * Color for the buttons within the iFrame. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the buttons within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorButton() {
    return colorButton;
  }


  public void setColorButton(String colorButton) {
    
    
    
    this.colorButton = colorButton;
  }


  public Options colorButtonText(String colorButtonText) {
    
    
    
    
    this.colorButtonText = colorButtonText;
    return this;
  }

   /**
   * Color for the text inside the buttons within the iFrame. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorButtonText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the text inside the buttons within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorButtonText() {
    return colorButtonText;
  }


  public void setColorButtonText(String colorButtonText) {
    
    
    
    this.colorButtonText = colorButtonText;
  }


  public Options colorCheckbox(String colorCheckbox) {
    
    
    
    
    this.colorCheckbox = colorCheckbox;
    return this;
  }

   /**
   * Color for the checkboxes within the iFrame. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorCheckbox
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the checkboxes within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorCheckbox() {
    return colorCheckbox;
  }


  public void setColorCheckbox(String colorCheckbox) {
    
    
    
    this.colorCheckbox = colorCheckbox;
  }


  public Options colorCheckboxCheckmark(String colorCheckboxCheckmark) {
    
    
    
    
    this.colorCheckboxCheckmark = colorCheckboxCheckmark;
    return this;
  }

   /**
   * Color for the checkboxes checkmark within the iFrame. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorCheckboxCheckmark
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the checkboxes checkmark within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorCheckboxCheckmark() {
    return colorCheckboxCheckmark;
  }


  public void setColorCheckboxCheckmark(String colorCheckboxCheckmark) {
    
    
    
    this.colorCheckboxCheckmark = colorCheckboxCheckmark;
  }


  public Options colorHeader(String colorHeader) {
    
    
    
    
    this.colorHeader = colorHeader;
    return this;
  }

   /**
   * Color for the headers within the iFrame. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the headers within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorHeader() {
    return colorHeader;
  }


  public void setColorHeader(String colorHeader) {
    
    
    
    this.colorHeader = colorHeader;
  }


  public Options colorLink(String colorLink) {
    
    
    
    
    this.colorLink = colorLink;
    return this;
  }

   /**
   * Color for the hyperlinks within the iFrame. Value should be a CSS hex color, e.g. \&quot;#FF9900\&quot;
   * @return colorLink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#FF9900", value = "Color for the hyperlinks within the iFrame. Value should be a CSS hex color, e.g. \"#FF9900\"")

  public String getColorLink() {
    return colorLink;
  }


  public void setColorLink(String colorLink) {
    
    
    
    this.colorLink = colorLink;
  }


  public Options dateOfBirthMandatory(Boolean dateOfBirthMandatory) {
    
    
    
    
    this.dateOfBirthMandatory = dateOfBirthMandatory;
    return this;
  }

   /**
   * If true, the consumer cannot skip date of birth. Default: false
   * @return dateOfBirthMandatory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the consumer cannot skip date of birth. Default: false")

  public Boolean getDateOfBirthMandatory() {
    return dateOfBirthMandatory;
  }


  public void setDateOfBirthMandatory(Boolean dateOfBirthMandatory) {
    
    
    
    this.dateOfBirthMandatory = dateOfBirthMandatory;
  }


  public Options shippingDetails(String shippingDetails) {
    
    
    
    
    this.shippingDetails = shippingDetails;
    return this;
  }

   /**
   * A message that will be presented on the confirmation page under the headline \&quot;Delivery\&quot; (max 255 characters).
   * @return shippingDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Delivered within 1-3 working days", value = "A message that will be presented on the confirmation page under the headline \"Delivery\" (max 255 characters).")

  public String getShippingDetails() {
    return shippingDetails;
  }


  public void setShippingDetails(String shippingDetails) {
    
    
    
    this.shippingDetails = shippingDetails;
  }


  public Options titleMandatory(Boolean titleMandatory) {
    
    
    
    
    this.titleMandatory = titleMandatory;
    return this;
  }

   /**
   * If specified to false, title becomes optional. Only available for orders for country GB.
   * @return titleMandatory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If specified to false, title becomes optional. Only available for orders for country GB.")

  public Boolean getTitleMandatory() {
    return titleMandatory;
  }


  public void setTitleMandatory(Boolean titleMandatory) {
    
    
    
    this.titleMandatory = titleMandatory;
  }


  public Options additionalCheckbox(Checkbox additionalCheckbox) {
    
    
    
    
    this.additionalCheckbox = additionalCheckbox;
    return this;
  }

   /**
   * Get additionalCheckbox
   * @return additionalCheckbox
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Checkbox getAdditionalCheckbox() {
    return additionalCheckbox;
  }


  public void setAdditionalCheckbox(Checkbox additionalCheckbox) {
    
    
    
    this.additionalCheckbox = additionalCheckbox;
  }


  public Options nationalIdentificationNumberMandatory(Boolean nationalIdentificationNumberMandatory) {
    
    
    
    
    this.nationalIdentificationNumberMandatory = nationalIdentificationNumberMandatory;
    return this;
  }

   /**
   * If true, the user cannot skip national identification number in SE, NO, FI and DK. Default: false. In order to read the national identification number in the validation callback, please contact Klarna’s merchant support.
   * @return nationalIdentificationNumberMandatory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the user cannot skip national identification number in SE, NO, FI and DK. Default: false. In order to read the national identification number in the validation callback, please contact Klarna’s merchant support.")

  public Boolean getNationalIdentificationNumberMandatory() {
    return nationalIdentificationNumberMandatory;
  }


  public void setNationalIdentificationNumberMandatory(Boolean nationalIdentificationNumberMandatory) {
    
    
    
    this.nationalIdentificationNumberMandatory = nationalIdentificationNumberMandatory;
  }


  public Options additionalMerchantTerms(String additionalMerchantTerms) {
    
    
    
    
    this.additionalMerchantTerms = additionalMerchantTerms;
    return this;
  }

   /**
   * Additional merchant defined field. e.g. Extra terms and conditions to show.  Example: \&quot;ADDITIONAL MERCHANT TERMS! \\[terms link\\](https://merchant.com/extra_terms)\&quot;
   * @return additionalMerchantTerms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional merchant defined field. e.g. Extra terms and conditions to show.  Example: \"ADDITIONAL MERCHANT TERMS! \\[terms link\\](https://merchant.com/extra_terms)\"")

  public String getAdditionalMerchantTerms() {
    return additionalMerchantTerms;
  }


  public void setAdditionalMerchantTerms(String additionalMerchantTerms) {
    
    
    
    this.additionalMerchantTerms = additionalMerchantTerms;
  }


  public Options phoneMandatory(Boolean phoneMandatory) {
    
    
    
    
    this.phoneMandatory = phoneMandatory;
    return this;
  }

   /**
   * If false, the consumer can skip the phone. Only available for orders in DACH countries.
   * @return phoneMandatory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If false, the consumer can skip the phone. Only available for orders in DACH countries.")

  public Boolean getPhoneMandatory() {
    return phoneMandatory;
  }


  public void setPhoneMandatory(Boolean phoneMandatory) {
    
    
    
    this.phoneMandatory = phoneMandatory;
  }


  public Options radiusBorder(String radiusBorder) {
    
    
    
    
    this.radiusBorder = radiusBorder;
    return this;
  }

   /**
   * Radius for the border of elements within the iFrame.
   * @return radiusBorder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Radius for the border of elements within the iFrame.")

  public String getRadiusBorder() {
    return radiusBorder;
  }


  public void setRadiusBorder(String radiusBorder) {
    
    
    
    this.radiusBorder = radiusBorder;
  }


  public Options allowedCustomerTypes(List<String> allowedCustomerTypes) {
    
    
    
    
    this.allowedCustomerTypes = allowedCustomerTypes;
    return this;
  }

  public Options addAllowedCustomerTypesItem(String allowedCustomerTypesItem) {
    if (this.allowedCustomerTypes == null) {
      this.allowedCustomerTypes = new ArrayList<>();
    }
    this.allowedCustomerTypes.add(allowedCustomerTypesItem);
    return this;
  }

   /**
   * A list of allowed customer types. Supported types: &lt;b&gt;person&lt;/b&gt; &amp; &lt;b&gt;organization&lt;/b&gt;. Example: [\&quot;person\&quot;,\&quot;organization\&quot;]
   * @return allowedCustomerTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of allowed customer types. Supported types: <b>person</b> & <b>organization</b>. Example: [\"person\",\"organization\"]")

  public List<String> getAllowedCustomerTypes() {
    return allowedCustomerTypes;
  }


  public void setAllowedCustomerTypes(List<String> allowedCustomerTypes) {
    
    
    
    this.allowedCustomerTypes = allowedCustomerTypes;
  }


  public Options showSubtotalDetail(Boolean showSubtotalDetail) {
    
    
    
    
    this.showSubtotalDetail = showSubtotalDetail;
    return this;
  }

   /**
   * If true, the Order Detail subtotals view is expanded when the Klarna Checkout iFrame is loaded. Default: false
   * @return showSubtotalDetail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, the Order Detail subtotals view is expanded when the Klarna Checkout iFrame is loaded. Default: false")

  public Boolean getShowSubtotalDetail() {
    return showSubtotalDetail;
  }


  public void setShowSubtotalDetail(Boolean showSubtotalDetail) {
    
    
    
    this.showSubtotalDetail = showSubtotalDetail;
  }


  public Options additionalCheckboxes(List<CheckboxV2> additionalCheckboxes) {
    
    
    
    
    this.additionalCheckboxes = additionalCheckboxes;
    return this;
  }

  public Options addAdditionalCheckboxesItem(CheckboxV2 additionalCheckboxesItem) {
    if (this.additionalCheckboxes == null) {
      this.additionalCheckboxes = new ArrayList<>();
    }
    this.additionalCheckboxes.add(additionalCheckboxesItem);
    return this;
  }

   /**
   * Get additionalCheckboxes
   * @return additionalCheckboxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CheckboxV2> getAdditionalCheckboxes() {
    return additionalCheckboxes;
  }


  public void setAdditionalCheckboxes(List<CheckboxV2> additionalCheckboxes) {
    
    
    
    this.additionalCheckboxes = additionalCheckboxes;
  }


  public Options verifyNationalIdentificationNumber(Boolean verifyNationalIdentificationNumber) {
    
    
    
    
    this.verifyNationalIdentificationNumber = verifyNationalIdentificationNumber;
    return this;
  }

   /**
   * Enable verification of National Identification Numbers only in Sweden, Finland and Norway. This option also make the national identification number mandatory. (Not applicable for countries outside of Sweden, Finland and Norway)
   * @return verifyNationalIdentificationNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enable verification of National Identification Numbers only in Sweden, Finland and Norway. This option also make the national identification number mandatory. (Not applicable for countries outside of Sweden, Finland and Norway)")

  public Boolean getVerifyNationalIdentificationNumber() {
    return verifyNationalIdentificationNumber;
  }


  public void setVerifyNationalIdentificationNumber(Boolean verifyNationalIdentificationNumber) {
    
    
    
    this.verifyNationalIdentificationNumber = verifyNationalIdentificationNumber;
  }


  public Options autoCapture(Boolean autoCapture) {
    
    
    
    
    this.autoCapture = autoCapture;
    return this;
  }

   /**
   * Allow merchant to trigger auto capturing.
   * @return autoCapture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allow merchant to trigger auto capturing.")

  public Boolean getAutoCapture() {
    return autoCapture;
  }


  public void setAutoCapture(Boolean autoCapture) {
    
    
    
    this.autoCapture = autoCapture;
  }


  public Options requireClientValidation(Boolean requireClientValidation) {
    
    
    
    
    this.requireClientValidation = requireClientValidation;
    return this;
  }

   /**
   * If true, a client side validation is needed to complete the purchase
   * @return requireClientValidation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, a client side validation is needed to complete the purchase")

  public Boolean getRequireClientValidation() {
    return requireClientValidation;
  }


  public void setRequireClientValidation(Boolean requireClientValidation) {
    
    
    
    this.requireClientValidation = requireClientValidation;
  }


  public Options enableDiscountModule(Boolean enableDiscountModule) {
    
    
    
    
    this.enableDiscountModule = enableDiscountModule;
    return this;
  }

   /**
   * Enables the inline discount module
   * @return enableDiscountModule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enables the inline discount module")

  public Boolean getEnableDiscountModule() {
    return enableDiscountModule;
  }


  public void setEnableDiscountModule(Boolean enableDiscountModule) {
    
    
    
    this.enableDiscountModule = enableDiscountModule;
  }


  public Options showVatRegistrationNumberField(Boolean showVatRegistrationNumberField) {
    
    
    
    
    this.showVatRegistrationNumberField = showVatRegistrationNumberField;
    return this;
  }

   /**
   * If true, a optional VAT registration number field will be shown in the address form. Only applies for b2b orders.
   * @return showVatRegistrationNumberField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, a optional VAT registration number field will be shown in the address form. Only applies for b2b orders.")

  public Boolean getShowVatRegistrationNumberField() {
    return showVatRegistrationNumberField;
  }


  public void setShowVatRegistrationNumberField(Boolean showVatRegistrationNumberField) {
    
    
    
    this.showVatRegistrationNumberField = showVatRegistrationNumberField;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Options instance itself
   */
  public Options putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Options options = (Options) o;
    return Objects.equals(this.requireValidateCallbackSuccess, options.requireValidateCallbackSuccess) &&
        Objects.equals(this.acquiringChannel, options.acquiringChannel) &&
        Objects.equals(this.vatRemoved, options.vatRemoved) &&
        Objects.equals(this.allowSeparateShippingAddress, options.allowSeparateShippingAddress) &&
        Objects.equals(this.colorButton, options.colorButton) &&
        Objects.equals(this.colorButtonText, options.colorButtonText) &&
        Objects.equals(this.colorCheckbox, options.colorCheckbox) &&
        Objects.equals(this.colorCheckboxCheckmark, options.colorCheckboxCheckmark) &&
        Objects.equals(this.colorHeader, options.colorHeader) &&
        Objects.equals(this.colorLink, options.colorLink) &&
        Objects.equals(this.dateOfBirthMandatory, options.dateOfBirthMandatory) &&
        Objects.equals(this.shippingDetails, options.shippingDetails) &&
        Objects.equals(this.titleMandatory, options.titleMandatory) &&
        Objects.equals(this.additionalCheckbox, options.additionalCheckbox) &&
        Objects.equals(this.nationalIdentificationNumberMandatory, options.nationalIdentificationNumberMandatory) &&
        Objects.equals(this.additionalMerchantTerms, options.additionalMerchantTerms) &&
        Objects.equals(this.phoneMandatory, options.phoneMandatory) &&
        Objects.equals(this.radiusBorder, options.radiusBorder) &&
        Objects.equals(this.allowedCustomerTypes, options.allowedCustomerTypes) &&
        Objects.equals(this.showSubtotalDetail, options.showSubtotalDetail) &&
        Objects.equals(this.additionalCheckboxes, options.additionalCheckboxes) &&
        Objects.equals(this.verifyNationalIdentificationNumber, options.verifyNationalIdentificationNumber) &&
        Objects.equals(this.autoCapture, options.autoCapture) &&
        Objects.equals(this.requireClientValidation, options.requireClientValidation) &&
        Objects.equals(this.enableDiscountModule, options.enableDiscountModule) &&
        Objects.equals(this.showVatRegistrationNumberField, options.showVatRegistrationNumberField)&&
        Objects.equals(this.additionalProperties, options.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requireValidateCallbackSuccess, acquiringChannel, vatRemoved, allowSeparateShippingAddress, colorButton, colorButtonText, colorCheckbox, colorCheckboxCheckmark, colorHeader, colorLink, dateOfBirthMandatory, shippingDetails, titleMandatory, additionalCheckbox, nationalIdentificationNumberMandatory, additionalMerchantTerms, phoneMandatory, radiusBorder, allowedCustomerTypes, showSubtotalDetail, additionalCheckboxes, verifyNationalIdentificationNumber, autoCapture, requireClientValidation, enableDiscountModule, showVatRegistrationNumberField, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Options {\n");
    sb.append("    requireValidateCallbackSuccess: ").append(toIndentedString(requireValidateCallbackSuccess)).append("\n");
    sb.append("    acquiringChannel: ").append(toIndentedString(acquiringChannel)).append("\n");
    sb.append("    vatRemoved: ").append(toIndentedString(vatRemoved)).append("\n");
    sb.append("    allowSeparateShippingAddress: ").append(toIndentedString(allowSeparateShippingAddress)).append("\n");
    sb.append("    colorButton: ").append(toIndentedString(colorButton)).append("\n");
    sb.append("    colorButtonText: ").append(toIndentedString(colorButtonText)).append("\n");
    sb.append("    colorCheckbox: ").append(toIndentedString(colorCheckbox)).append("\n");
    sb.append("    colorCheckboxCheckmark: ").append(toIndentedString(colorCheckboxCheckmark)).append("\n");
    sb.append("    colorHeader: ").append(toIndentedString(colorHeader)).append("\n");
    sb.append("    colorLink: ").append(toIndentedString(colorLink)).append("\n");
    sb.append("    dateOfBirthMandatory: ").append(toIndentedString(dateOfBirthMandatory)).append("\n");
    sb.append("    shippingDetails: ").append(toIndentedString(shippingDetails)).append("\n");
    sb.append("    titleMandatory: ").append(toIndentedString(titleMandatory)).append("\n");
    sb.append("    additionalCheckbox: ").append(toIndentedString(additionalCheckbox)).append("\n");
    sb.append("    nationalIdentificationNumberMandatory: ").append(toIndentedString(nationalIdentificationNumberMandatory)).append("\n");
    sb.append("    additionalMerchantTerms: ").append(toIndentedString(additionalMerchantTerms)).append("\n");
    sb.append("    phoneMandatory: ").append(toIndentedString(phoneMandatory)).append("\n");
    sb.append("    radiusBorder: ").append(toIndentedString(radiusBorder)).append("\n");
    sb.append("    allowedCustomerTypes: ").append(toIndentedString(allowedCustomerTypes)).append("\n");
    sb.append("    showSubtotalDetail: ").append(toIndentedString(showSubtotalDetail)).append("\n");
    sb.append("    additionalCheckboxes: ").append(toIndentedString(additionalCheckboxes)).append("\n");
    sb.append("    verifyNationalIdentificationNumber: ").append(toIndentedString(verifyNationalIdentificationNumber)).append("\n");
    sb.append("    autoCapture: ").append(toIndentedString(autoCapture)).append("\n");
    sb.append("    requireClientValidation: ").append(toIndentedString(requireClientValidation)).append("\n");
    sb.append("    enableDiscountModule: ").append(toIndentedString(enableDiscountModule)).append("\n");
    sb.append("    showVatRegistrationNumberField: ").append(toIndentedString(showVatRegistrationNumberField)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("require_validate_callback_success");
    openapiFields.add("acquiring_channel");
    openapiFields.add("vat_removed");
    openapiFields.add("allow_separate_shipping_address");
    openapiFields.add("color_button");
    openapiFields.add("color_button_text");
    openapiFields.add("color_checkbox");
    openapiFields.add("color_checkbox_checkmark");
    openapiFields.add("color_header");
    openapiFields.add("color_link");
    openapiFields.add("date_of_birth_mandatory");
    openapiFields.add("shipping_details");
    openapiFields.add("title_mandatory");
    openapiFields.add("additional_checkbox");
    openapiFields.add("national_identification_number_mandatory");
    openapiFields.add("additional_merchant_terms");
    openapiFields.add("phone_mandatory");
    openapiFields.add("radius_border");
    openapiFields.add("allowed_customer_types");
    openapiFields.add("show_subtotal_detail");
    openapiFields.add("additional_checkboxes");
    openapiFields.add("verify_national_identification_number");
    openapiFields.add("auto_capture");
    openapiFields.add("require_client_validation");
    openapiFields.add("enable_discount_module");
    openapiFields.add("show_vat_registration_number_field");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Options
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Options.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Options is not found in the empty JSON string", Options.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("acquiring_channel") != null && !jsonObj.get("acquiring_channel").isJsonNull()) && !jsonObj.get("acquiring_channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquiring_channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquiring_channel").toString()));
      }
      if ((jsonObj.get("color_button") != null && !jsonObj.get("color_button").isJsonNull()) && !jsonObj.get("color_button").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_button` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_button").toString()));
      }
      if ((jsonObj.get("color_button_text") != null && !jsonObj.get("color_button_text").isJsonNull()) && !jsonObj.get("color_button_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_button_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_button_text").toString()));
      }
      if ((jsonObj.get("color_checkbox") != null && !jsonObj.get("color_checkbox").isJsonNull()) && !jsonObj.get("color_checkbox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_checkbox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_checkbox").toString()));
      }
      if ((jsonObj.get("color_checkbox_checkmark") != null && !jsonObj.get("color_checkbox_checkmark").isJsonNull()) && !jsonObj.get("color_checkbox_checkmark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_checkbox_checkmark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_checkbox_checkmark").toString()));
      }
      if ((jsonObj.get("color_header") != null && !jsonObj.get("color_header").isJsonNull()) && !jsonObj.get("color_header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_header").toString()));
      }
      if ((jsonObj.get("color_link") != null && !jsonObj.get("color_link").isJsonNull()) && !jsonObj.get("color_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_link").toString()));
      }
      if ((jsonObj.get("shipping_details") != null && !jsonObj.get("shipping_details").isJsonNull()) && !jsonObj.get("shipping_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_details").toString()));
      }
      // validate the optional field `additional_checkbox`
      if (jsonObj.get("additional_checkbox") != null && !jsonObj.get("additional_checkbox").isJsonNull()) {
        Checkbox.validateJsonObject(jsonObj.getAsJsonObject("additional_checkbox"));
      }
      if ((jsonObj.get("additional_merchant_terms") != null && !jsonObj.get("additional_merchant_terms").isJsonNull()) && !jsonObj.get("additional_merchant_terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_merchant_terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_merchant_terms").toString()));
      }
      if ((jsonObj.get("radius_border") != null && !jsonObj.get("radius_border").isJsonNull()) && !jsonObj.get("radius_border").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `radius_border` to be a primitive type in the JSON string but got `%s`", jsonObj.get("radius_border").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_customer_types") != null && !jsonObj.get("allowed_customer_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_customer_types` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_customer_types").toString()));
      }
      if (jsonObj.get("additional_checkboxes") != null && !jsonObj.get("additional_checkboxes").isJsonNull()) {
        JsonArray jsonArrayadditionalCheckboxes = jsonObj.getAsJsonArray("additional_checkboxes");
        if (jsonArrayadditionalCheckboxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additional_checkboxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additional_checkboxes` to be an array in the JSON string but got `%s`", jsonObj.get("additional_checkboxes").toString()));
          }

          // validate the optional field `additional_checkboxes` (array)
          for (int i = 0; i < jsonArrayadditionalCheckboxes.size(); i++) {
            CheckboxV2.validateJsonObject(jsonArrayadditionalCheckboxes.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Options.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Options' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Options> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Options.class));

       return (TypeAdapter<T>) new TypeAdapter<Options>() {
           @Override
           public void write(JsonWriter out, Options value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Options read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Options instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Options given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Options
  * @throws IOException if the JSON string is invalid with respect to Options
  */
  public static Options fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Options.class);
  }

 /**
  * Convert an instance of Options to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


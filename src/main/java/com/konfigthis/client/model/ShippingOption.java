/*
 * Klarna Checkout API V3
 * The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DeliveryDetailsV1;
import com.konfigthis.client.model.SelectedAddon;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ShippingOption
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ShippingOption {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROMO = "promo";
  @SerializedName(SERIALIZED_NAME_PROMO)
  private String promo;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Long price;

  public static final String SERIALIZED_NAME_PRESELECTED = "preselected";
  @SerializedName(SERIALIZED_NAME_PRESELECTED)
  private Boolean preselected;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Long taxAmount;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private Long taxRate;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shipping_method";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public static final String SERIALIZED_NAME_DELIVERY_DETAILS = "delivery_details";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DETAILS)
  private DeliveryDetailsV1 deliveryDetails;

  public static final String SERIALIZED_NAME_TMS_REFERENCE = "tms_reference";
  @SerializedName(SERIALIZED_NAME_TMS_REFERENCE)
  private String tmsReference;

  public static final String SERIALIZED_NAME_SELECTED_ADDONS = "selected_addons";
  @SerializedName(SERIALIZED_NAME_SELECTED_ADDONS)
  private List<SelectedAddon> selectedAddons = null;

  public ShippingOption() {
  }

  public ShippingOption description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Delivery by 4:30 pm", value = "Description.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ShippingOption id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "express_priority", required = true, value = "id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ShippingOption name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "EXPRESS 1-2 Days", required = true, value = "Name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public ShippingOption promo(String promo) {
    
    
    
    
    this.promo = promo;
    return this;
  }

   /**
   * Promotion name. To be used if this shipping option is promotional.
   * @return promo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Christmas Promotion", value = "Promotion name. To be used if this shipping option is promotional.")

  public String getPromo() {
    return promo;
  }


  public void setPromo(String promo) {
    
    
    
    this.promo = promo;
  }


  public ShippingOption price(Long price) {
    
    
    
    
    this.price = price;
    return this;
  }

   /**
   * Price including tax.
   * @return price
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Price including tax.")

  public Long getPrice() {
    return price;
  }


  public void setPrice(Long price) {
    
    
    
    this.price = price;
  }


  public ShippingOption preselected(Boolean preselected) {
    
    
    
    
    this.preselected = preselected;
    return this;
  }

   /**
   * If true, this option will be preselected when checkout loads. Default: false
   * @return preselected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, this option will be preselected when checkout loads. Default: false")

  public Boolean getPreselected() {
    return preselected;
  }


  public void setPreselected(Boolean preselected) {
    
    
    
    this.preselected = preselected;
  }


  public ShippingOption taxAmount(Long taxAmount) {
    
    
    
    
    this.taxAmount = taxAmount;
    return this;
  }

   /**
   * Tax amount.
   * @return taxAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Tax amount.")

  public Long getTaxAmount() {
    return taxAmount;
  }


  public void setTaxAmount(Long taxAmount) {
    
    
    
    this.taxAmount = taxAmount;
  }


  public ShippingOption taxRate(Long taxRate) {
    
    
    
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Non-negative. In percent, two implicit decimals. I.e 2500 &#x3D; 25%.
   * @return taxRate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Non-negative. In percent, two implicit decimals. I.e 2500 = 25%.")

  public Long getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(Long taxRate) {
    
    
    
    this.taxRate = taxRate;
  }


  public ShippingOption shippingMethod(String shippingMethod) {
    
    
    
    
    this.shippingMethod = shippingMethod;
    return this;
  }

   /**
   * Shipping method. Possible values:&lt;ul&gt;&lt;li&gt;PickUpStore&lt;/li&gt;&lt;li&gt;Home&lt;/li&gt;&lt;li&gt;BoxReg&lt;/li&gt;&lt;li&gt;BoxUnreg&lt;/li&gt;&lt;li&gt;PickUpPoint&lt;/li&gt;&lt;li&gt;Own&lt;/li&gt;&lt;li&gt;Postal&lt;/li&gt;&lt;li&gt;DHLPackstation&lt;/li&gt;&lt;li&gt;Digital&lt;/li&gt;&lt;/ul&gt; If DHLPackstation is selected the correct form will be displayed.
   * @return shippingMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PickUpStore", value = "Shipping method. Possible values:<ul><li>PickUpStore</li><li>Home</li><li>BoxReg</li><li>BoxUnreg</li><li>PickUpPoint</li><li>Own</li><li>Postal</li><li>DHLPackstation</li><li>Digital</li></ul> If DHLPackstation is selected the correct form will be displayed.")

  public String getShippingMethod() {
    return shippingMethod;
  }


  public void setShippingMethod(String shippingMethod) {
    
    
    
    this.shippingMethod = shippingMethod;
  }


  public ShippingOption deliveryDetails(DeliveryDetailsV1 deliveryDetails) {
    
    
    
    
    this.deliveryDetails = deliveryDetails;
    return this;
  }

   /**
   * Get deliveryDetails
   * @return deliveryDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeliveryDetailsV1 getDeliveryDetails() {
    return deliveryDetails;
  }


  public void setDeliveryDetails(DeliveryDetailsV1 deliveryDetails) {
    
    
    
    this.deliveryDetails = deliveryDetails;
  }


  public ShippingOption tmsReference(String tmsReference) {
    
    
    
    
    this.tmsReference = tmsReference;
    return this;
  }

   /**
   * TMS reference. Required to map completed orders to shipments reserved in TMS.
   * @return tmsReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a1b2c3d4-e4f6-g7h8-i9j0-k1l2m3n4o5p6", value = "TMS reference. Required to map completed orders to shipments reserved in TMS.")

  public String getTmsReference() {
    return tmsReference;
  }


  public void setTmsReference(String tmsReference) {
    
    
    
    this.tmsReference = tmsReference;
  }


  public ShippingOption selectedAddons(List<SelectedAddon> selectedAddons) {
    
    
    
    
    this.selectedAddons = selectedAddons;
    return this;
  }

  public ShippingOption addSelectedAddonsItem(SelectedAddon selectedAddonsItem) {
    if (this.selectedAddons == null) {
      this.selectedAddons = new ArrayList<>();
    }
    this.selectedAddons.add(selectedAddonsItem);
    return this;
  }

   /**
   * Get selectedAddons
   * @return selectedAddons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<SelectedAddon> getSelectedAddons() {
    return selectedAddons;
  }


  public void setSelectedAddons(List<SelectedAddon> selectedAddons) {
    
    
    
    this.selectedAddons = selectedAddons;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ShippingOption instance itself
   */
  public ShippingOption putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingOption shippingOption = (ShippingOption) o;
    return Objects.equals(this.description, shippingOption.description) &&
        Objects.equals(this.id, shippingOption.id) &&
        Objects.equals(this.name, shippingOption.name) &&
        Objects.equals(this.promo, shippingOption.promo) &&
        Objects.equals(this.price, shippingOption.price) &&
        Objects.equals(this.preselected, shippingOption.preselected) &&
        Objects.equals(this.taxAmount, shippingOption.taxAmount) &&
        Objects.equals(this.taxRate, shippingOption.taxRate) &&
        Objects.equals(this.shippingMethod, shippingOption.shippingMethod) &&
        Objects.equals(this.deliveryDetails, shippingOption.deliveryDetails) &&
        Objects.equals(this.tmsReference, shippingOption.tmsReference) &&
        Objects.equals(this.selectedAddons, shippingOption.selectedAddons)&&
        Objects.equals(this.additionalProperties, shippingOption.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, name, promo, price, preselected, taxAmount, taxRate, shippingMethod, deliveryDetails, tmsReference, selectedAddons, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingOption {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    promo: ").append(toIndentedString(promo)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    preselected: ").append(toIndentedString(preselected)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    deliveryDetails: ").append(toIndentedString(deliveryDetails)).append("\n");
    sb.append("    tmsReference: ").append(toIndentedString(tmsReference)).append("\n");
    sb.append("    selectedAddons: ").append(toIndentedString(selectedAddons)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("promo");
    openapiFields.add("price");
    openapiFields.add("preselected");
    openapiFields.add("tax_amount");
    openapiFields.add("tax_rate");
    openapiFields.add("shipping_method");
    openapiFields.add("delivery_details");
    openapiFields.add("tms_reference");
    openapiFields.add("selected_addons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("tax_amount");
    openapiRequiredFields.add("tax_rate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ShippingOption
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ShippingOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingOption is not found in the empty JSON string", ShippingOption.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShippingOption.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("promo") != null && !jsonObj.get("promo").isJsonNull()) && !jsonObj.get("promo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promo").toString()));
      }
      if ((jsonObj.get("shipping_method") != null && !jsonObj.get("shipping_method").isJsonNull()) && !jsonObj.get("shipping_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_method").toString()));
      }
      // validate the optional field `delivery_details`
      if (jsonObj.get("delivery_details") != null && !jsonObj.get("delivery_details").isJsonNull()) {
        DeliveryDetailsV1.validateJsonObject(jsonObj.getAsJsonObject("delivery_details"));
      }
      if ((jsonObj.get("tms_reference") != null && !jsonObj.get("tms_reference").isJsonNull()) && !jsonObj.get("tms_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tms_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tms_reference").toString()));
      }
      if (jsonObj.get("selected_addons") != null && !jsonObj.get("selected_addons").isJsonNull()) {
        JsonArray jsonArrayselectedAddons = jsonObj.getAsJsonArray("selected_addons");
        if (jsonArrayselectedAddons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selected_addons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selected_addons` to be an array in the JSON string but got `%s`", jsonObj.get("selected_addons").toString()));
          }

          // validate the optional field `selected_addons` (array)
          for (int i = 0; i < jsonArrayselectedAddons.size(); i++) {
            SelectedAddon.validateJsonObject(jsonArrayselectedAddons.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingOption.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingOption>() {
           @Override
           public void write(JsonWriter out, ShippingOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingOption read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ShippingOption instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ShippingOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ShippingOption
  * @throws IOException if the JSON string is invalid with respect to ShippingOption
  */
  public static ShippingOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingOption.class);
  }

 /**
  * Convert an instance of ShippingOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Klarna Checkout API V3
 * The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DiscountLine
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DiscountLine {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private Long unitPrice;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private Long taxRate;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Long totalAmount;

  public static final String SERIALIZED_NAME_TOTAL_TAX_AMOUNT = "total_tax_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_AMOUNT)
  private Long totalTaxAmount;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_MERCHANT_DATA = "merchant_data";
  @SerializedName(SERIALIZED_NAME_MERCHANT_DATA)
  private String merchantData;

  public DiscountLine() {
  }

  public DiscountLine name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Descriptive name of discount
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Super deal", required = true, value = "Descriptive name of discount")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public DiscountLine quantity(Long quantity) {
    if (quantity != null && quantity < 0) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 0.");
    }
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * Non-negative number. Quantity of the discount line item.
   * minimum: 0
   * @return quantity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5", required = true, value = "Non-negative number. Quantity of the discount line item.")

  public Long getQuantity() {
    return quantity;
  }


  public void setQuantity(Long quantity) {
    if (quantity != null && quantity < 0) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 0.");
    }
    
    
    this.quantity = quantity;
  }


  public DiscountLine unitPrice(Long unitPrice) {
    
    if (unitPrice != null && unitPrice > 0) {
      throw new IllegalArgumentException("Invalid value for unitPrice. Must be less than or equal to 0.");
    }
    
    
    this.unitPrice = unitPrice;
    return this;
  }

   /**
   * Minor units. Includes tax, excludes discount. (Must be non-positive).  Example: -100 Euros should be -10000.
   * maximum: 0
   * @return unitPrice
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "-10000", required = true, value = "Minor units. Includes tax, excludes discount. (Must be non-positive).  Example: -100 Euros should be -10000.")

  public Long getUnitPrice() {
    return unitPrice;
  }


  public void setUnitPrice(Long unitPrice) {
    
    if (unitPrice != null && unitPrice > 0) {
      throw new IllegalArgumentException("Invalid value for unitPrice. Must be less than or equal to 0.");
    }
    
    this.unitPrice = unitPrice;
  }


  public DiscountLine taxRate(Long taxRate) {
    
    if (taxRate != null && taxRate > 10000) {
      throw new IllegalArgumentException("Invalid value for taxRate. Must be less than or equal to 10000.");
    }
    
    
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Non-negative value. The percentage value is represented with two implicit decimals. (max 10000)  Example: 25% should be 2500.
   * maximum: 10000
   * @return taxRate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1000", required = true, value = "Non-negative value. The percentage value is represented with two implicit decimals. (max 10000)  Example: 25% should be 2500.")

  public Long getTaxRate() {
    return taxRate;
  }


  public void setTaxRate(Long taxRate) {
    
    if (taxRate != null && taxRate > 10000) {
      throw new IllegalArgumentException("Invalid value for taxRate. Must be less than or equal to 10000.");
    }
    
    this.taxRate = taxRate;
  }


  public DiscountLine totalAmount(Long totalAmount) {
    
    if (totalAmount != null && totalAmount > 0) {
      throw new IllegalArgumentException("Invalid value for totalAmount. Must be less than or equal to 0.");
    }
    
    
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Minor units. Includes tax and discount.   Example: -25 euros should be -2500 Value &#x3D; (quantity x unit_price). (Must be non-positive)
   * maximum: 0
   * @return totalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "-2500", required = true, value = "Minor units. Includes tax and discount.   Example: -25 euros should be -2500 Value = (quantity x unit_price). (Must be non-positive)")

  public Long getTotalAmount() {
    return totalAmount;
  }


  public void setTotalAmount(Long totalAmount) {
    
    if (totalAmount != null && totalAmount > 0) {
      throw new IllegalArgumentException("Invalid value for totalAmount. Must be less than or equal to 0.");
    }
    
    this.totalAmount = totalAmount;
  }


  public DiscountLine totalTaxAmount(Long totalTaxAmount) {
    
    
    
    
    this.totalTaxAmount = totalTaxAmount;
    return this;
  }

   /**
   * Must be within ±1 of total_amount - total_amount \\* 10000 / (10000 + tax_rate). Should be non-positive
   * @return totalTaxAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "-123", required = true, value = "Must be within ±1 of total_amount - total_amount \\* 10000 / (10000 + tax_rate). Should be non-positive")

  public Long getTotalTaxAmount() {
    return totalTaxAmount;
  }


  public void setTotalTaxAmount(Long totalTaxAmount) {
    
    
    
    this.totalTaxAmount = totalTaxAmount;
  }


  public DiscountLine reference(String reference) {
    
    
    if (reference != null && reference.length() < 0) {
      throw new IllegalArgumentException("Invalid value for reference. Length must be greater than or equal to 0.");
    }
    
    this.reference = reference;
    return this;
  }

   /**
   * The CRM reference to the gift-card that was entered by the user
   * @return reference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "645f54bb-dbb7-6e1f-83bd-bc81a2c3a258", value = "The CRM reference to the gift-card that was entered by the user")

  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    
    
    if (reference != null && reference.length() < 0) {
      throw new IllegalArgumentException("Invalid value for reference. Length must be greater than or equal to 0.");
    }
    this.reference = reference;
  }


  public DiscountLine merchantData(String merchantData) {
    
    
    if (merchantData != null && merchantData.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantData. Length must be greater than or equal to 0.");
    }
    
    this.merchantData = merchantData;
    return this;
  }

   /**
   * The gift-card number that was entered by the user
   * @return merchantData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"card_number\":\"5551234567890\"}", value = "The gift-card number that was entered by the user")

  public String getMerchantData() {
    return merchantData;
  }


  public void setMerchantData(String merchantData) {
    
    
    if (merchantData != null && merchantData.length() < 0) {
      throw new IllegalArgumentException("Invalid value for merchantData. Length must be greater than or equal to 0.");
    }
    this.merchantData = merchantData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DiscountLine instance itself
   */
  public DiscountLine putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscountLine discountLine = (DiscountLine) o;
    return Objects.equals(this.name, discountLine.name) &&
        Objects.equals(this.quantity, discountLine.quantity) &&
        Objects.equals(this.unitPrice, discountLine.unitPrice) &&
        Objects.equals(this.taxRate, discountLine.taxRate) &&
        Objects.equals(this.totalAmount, discountLine.totalAmount) &&
        Objects.equals(this.totalTaxAmount, discountLine.totalTaxAmount) &&
        Objects.equals(this.reference, discountLine.reference) &&
        Objects.equals(this.merchantData, discountLine.merchantData)&&
        Objects.equals(this.additionalProperties, discountLine.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, quantity, unitPrice, taxRate, totalAmount, totalTaxAmount, reference, merchantData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscountLine {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    totalTaxAmount: ").append(toIndentedString(totalTaxAmount)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    merchantData: ").append(toIndentedString(merchantData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("quantity");
    openapiFields.add("unit_price");
    openapiFields.add("tax_rate");
    openapiFields.add("total_amount");
    openapiFields.add("total_tax_amount");
    openapiFields.add("reference");
    openapiFields.add("merchant_data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("unit_price");
    openapiRequiredFields.add("tax_rate");
    openapiRequiredFields.add("total_amount");
    openapiRequiredFields.add("total_tax_amount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DiscountLine
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DiscountLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscountLine is not found in the empty JSON string", DiscountLine.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiscountLine.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("merchant_data") != null && !jsonObj.get("merchant_data").isJsonNull()) && !jsonObj.get("merchant_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscountLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscountLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscountLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscountLine.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscountLine>() {
           @Override
           public void write(JsonWriter out, DiscountLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscountLine read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DiscountLine instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DiscountLine given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DiscountLine
  * @throws IOException if the JSON string is invalid with respect to DiscountLine
  */
  public static DiscountLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscountLine.class);
  }

 /**
  * Convert an instance of DiscountLine to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * Klarna Checkout API V3
 * The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.DiscountLine;
import com.konfigthis.client.model.Gui;
import com.konfigthis.client.model.MerchantRequested;
import com.konfigthis.client.model.MerchantUrls;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Options;
import com.konfigthis.client.model.Order;
import com.konfigthis.client.model.OrderLine;
import com.konfigthis.client.model.PaymentProvider;
import com.konfigthis.client.model.ShippingOption;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrderApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call abortOrderCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checkout/v3/orders/{order_id}/abort"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abortOrderValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling abortOrder(Async)");
        }

        return abortOrderCall(orderId, _callback);

    }


    private ApiResponse<Order> abortOrderWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = abortOrderValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call abortOrderAsync(String orderId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = abortOrderValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AbortOrderRequestBuilder {
        private final String orderId;

        private AbortOrderRequestBuilder(String orderId) {
            this.orderId = orderId;
        }

        /**
         * Build call for abortOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return abortOrderCall(orderId, _callback);
        }


        /**
         * Execute abortOrder request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            ApiResponse<Order> localVarResp = abortOrderWithHttpInfo(orderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute abortOrder request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            return abortOrderWithHttpInfo(orderId);
        }

        /**
         * Execute abortOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            return abortOrderAsync(orderId, _callback);
        }
    }

    /**
     * Abort an order
     * Mark an order as aborted.
     * @param orderId  (required)
     * @return AbortOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
     </table>
     */
    public AbortOrderRequestBuilder abortOrder(String orderId) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new AbortOrderRequestBuilder(orderId);
    }
    private okhttp3.Call createNewOrderCall(String klarnaPartner, Order order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/checkout/v3/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (klarnaPartner != null) {
            localVarHeaderParams.put("Klarna-Partner", localVarApiClient.parameterToString(klarnaPartner));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewOrderValidateBeforeCall(String klarnaPartner, Order order, final ApiCallback _callback) throws ApiException {
        return createNewOrderCall(klarnaPartner, order, _callback);

    }


    private ApiResponse<Order> createNewOrderWithHttpInfo(String klarnaPartner, Order order) throws ApiException {
        okhttp3.Call localVarCall = createNewOrderValidateBeforeCall(klarnaPartner, order, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewOrderAsync(String klarnaPartner, Order order, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewOrderValidateBeforeCall(klarnaPartner, order, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewOrderRequestBuilder {
        private final String purchaseCountry;
        private final String purchaseCurrency;
        private final String locale;
        private final Long orderAmount;
        private final Long orderTaxAmount;
        private final List<OrderLine> orderLines;
        private List<String> tags;
        private String orderId;
        private String name;
        private String status;
        private Address billingAddress;
        private Address shippingAddress;
        private Customer customer;
        private MerchantUrls merchantUrls;
        private String htmlSnippet;
        private String merchantReference1;
        private String merchantReference2;
        private OffsetDateTime startedAt;
        private OffsetDateTime completedAt;
        private OffsetDateTime lastModifiedAt;
        private Options options;
        private Attachment attachment;
        private List<PaymentProvider> externalPaymentMethods;
        private List<PaymentProvider> externalCheckouts;
        private List<String> shippingCountries;
        private List<ShippingOption> shippingOptions;
        private String merchantData;
        private Gui gui;
        private MerchantRequested merchantRequested;
        private ShippingOption selectedShippingOption;
        private Boolean recurring;
        private String recurringToken;
        private String recurringDescription;
        private List<String> billingCountries;
        private List<DiscountLine> discountLines;
        private String klarnaPartner;

        private CreateNewOrderRequestBuilder(String purchaseCountry, String purchaseCurrency, String locale, Long orderAmount, Long orderTaxAmount, List<OrderLine> orderLines) {
            this.purchaseCountry = purchaseCountry;
            this.purchaseCurrency = purchaseCurrency;
            this.locale = locale;
            this.orderAmount = orderAmount;
            this.orderTaxAmount = orderTaxAmount;
            this.orderLines = orderLines;
        }

        /**
         * Set tags
         * @param tags Extra information added to the order.  Example: [\\\&quot;dangerous_goods\\\&quot;, \\\&quot;bulky\\\&quot;] (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set orderId
         * @param orderId Unique order ID that will be used for the entire lifecycle of the order. (max 255 characters) (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder orderId(String orderId) {
            this.orderId = orderId;
            return this;
        }
        
        /**
         * Set name
         * @param name The merchant name (max 255 characters). (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status The current status of the order. The status will be ‘incomplete’ until the customer has been successfully authorized. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set shippingAddress
         * @param shippingAddress  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder shippingAddress(Address shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        
        /**
         * Set customer
         * @param customer  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder customer(Customer customer) {
            this.customer = customer;
            return this;
        }
        
        /**
         * Set merchantUrls
         * @param merchantUrls  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder merchantUrls(MerchantUrls merchantUrls) {
            this.merchantUrls = merchantUrls;
            return this;
        }
        
        /**
         * Set htmlSnippet
         * @param htmlSnippet The HTML snippet that is used to render the checkout in an iframe. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder htmlSnippet(String htmlSnippet) {
            this.htmlSnippet = htmlSnippet;
            return this;
        }
        
        /**
         * Set merchantReference1
         * @param merchantReference1 Used for storing merchant&#39;s internal order number or other reference. If set, will be shown on the confirmation page as \\\&quot;order number\\\&quot; . The value is also available in the settlement files. (max 255 characters). Example: \\\&quot;45aa52f387871e3a210645d4\\\&quot; (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder merchantReference1(String merchantReference1) {
            this.merchantReference1 = merchantReference1;
            return this;
        }
        
        /**
         * Set merchantReference2
         * @param merchantReference2 Used for storing merchant&#39;s internal order number or other reference. The value is available in the settlement files. (max 255 characters). Example: \\\&quot;45aa52f387871e3a210645d4\\\&quot; (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder merchantReference2(String merchantReference2) {
            this.merchantReference2 = merchantReference2;
            return this;
        }
        
        /**
         * Set startedAt
         * @param startedAt ISO 8601 datetime. The date and time when the order has been created. The format will be as follows: \\\&quot;yyyy-mm-ddThh:mm:ssZ\\\&quot; (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder startedAt(OffsetDateTime startedAt) {
            this.startedAt = startedAt;
            return this;
        }
        
        /**
         * Set completedAt
         * @param completedAt ISO 8601 datetime. The date and time when the order has been completed. The format will be as follows: \\\&quot;yyyy-mm-ddThh:mm:ssZ\\\&quot; (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder completedAt(OffsetDateTime completedAt) {
            this.completedAt = completedAt;
            return this;
        }
        
        /**
         * Set lastModifiedAt
         * @param lastModifiedAt ISO 8601 datetime. The date and time when the order was last modified. The format will be as follows: \\\&quot;yyyy-mm-ddThh:mm:ssZ\\\&quot; (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder lastModifiedAt(OffsetDateTime lastModifiedAt) {
            this.lastModifiedAt = lastModifiedAt;
            return this;
        }
        
        /**
         * Set options
         * @param options  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder options(Options options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set attachment
         * @param attachment  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder attachment(Attachment attachment) {
            this.attachment = attachment;
            return this;
        }
        
        /**
         * Set externalPaymentMethods
         * @param externalPaymentMethods List of external payment methods that will be displayed as part of payment methods in the checkout. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder externalPaymentMethods(List<PaymentProvider> externalPaymentMethods) {
            this.externalPaymentMethods = externalPaymentMethods;
            return this;
        }
        
        /**
         * Set externalCheckouts
         * @param externalCheckouts List of external checkouts that will be displayed as part of payment methods in the checkout. The image_url is required, and the image size has to be 276x48px (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder externalCheckouts(List<PaymentProvider> externalCheckouts) {
            this.externalCheckouts = externalCheckouts;
            return this;
        }
        
        /**
         * Set shippingCountries
         * @param shippingCountries List of allowed shipping countries for this order in ISO-3166 alpha-2 format.  If specified, the customer will be able to change the shipping country in the checkout and you will be notified through ‘address_update’ callback or the ‘shipping_address_change’ javascript event.   If not specified then the default value will be the purchase country.  Example: look at billing_countries example. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder shippingCountries(List<String> shippingCountries) {
            this.shippingCountries = shippingCountries;
            return this;
        }
        
        /**
         * Set shippingOptions
         * @param shippingOptions A list of shipping options available for this order. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder shippingOptions(List<ShippingOption> shippingOptions) {
            this.shippingOptions = shippingOptions;
            return this;
        }
        
        /**
         * Set merchantData
         * @param merchantData Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters). (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder merchantData(String merchantData) {
            this.merchantData = merchantData;
            return this;
        }
        
        /**
         * Set gui
         * @param gui  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder gui(Gui gui) {
            this.gui = gui;
            return this;
        }
        
        /**
         * Set merchantRequested
         * @param merchantRequested  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder merchantRequested(MerchantRequested merchantRequested) {
            this.merchantRequested = merchantRequested;
            return this;
        }
        
        /**
         * Set selectedShippingOption
         * @param selectedShippingOption  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder selectedShippingOption(ShippingOption selectedShippingOption) {
            this.selectedShippingOption = selectedShippingOption;
            return this;
        }
        
        /**
         * Set recurring
         * @param recurring Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false  Depending on specified country, recurring could be used for the following payment methods: Pay Later, Direct Debit, Card. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder recurring(Boolean recurring) {
            this.recurring = recurring;
            return this;
        }
        
        /**
         * Set recurringToken
         * @param recurringToken Token to be used when creating recurring orders. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder recurringToken(String recurringToken) {
            this.recurringToken = recurringToken;
            return this;
        }
        
        /**
         * Set recurringDescription
         * @param recurringDescription Description to be added to the recurring order. (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder recurringDescription(String recurringDescription) {
            this.recurringDescription = recurringDescription;
            return this;
        }
        
        /**
         * Set billingCountries
         * @param billingCountries List of allowed billing countries for this order. If specified, the customer will be able to change the billing country in the checkout and you will be notified through ‘country_change’ callback or the ‘billing_address_change’ javascript event. If not specified but shipping_countries is specified, will use same values as shipping_countries. If not specified and shipping_countries is not specified, then the default value will be the purchase country.  Example: [\\\&quot;AD\\\&quot;, \\\&quot;AE\\\&quot;, \\\&quot;AG\\\&quot;, \\\&quot;AI\\\&quot;, \\\&quot;AL\\\&quot;, \\\&quot;AM\\\&quot;, \\\&quot;AQ\\\&quot;, \\\&quot;AR\\\&quot;, \\\&quot;AS\\\&quot;, \\\&quot;AT\\\&quot;, \\\&quot;AU\\\&quot;, \\\&quot;AW\\\&quot;, \\\&quot;AX\\\&quot;, \\\&quot;AZ\\\&quot;, \\\&quot;BA\\\&quot;, \\\&quot;BB\\\&quot;, \\\&quot;BD\\\&quot;, \\\&quot;BE\\\&quot;, \\\&quot;BF\\\&quot;, \\\&quot;BG\\\&quot;, \\\&quot;BH\\\&quot;, \\\&quot;BJ\\\&quot;, \\\&quot;BL\\\&quot;, \\\&quot;BM\\\&quot;, \\\&quot;BN\\\&quot;, \\\&quot;BO\\\&quot;, \\\&quot;BQ\\\&quot;, \\\&quot;BR\\\&quot;, \\\&quot;BS\\\&quot;, \\\&quot;BT\\\&quot;, \\\&quot;BW\\\&quot;, \\\&quot;BY\\\&quot;, \\\&quot;BZ\\\&quot;, \\\&quot;CA\\\&quot;, \\\&quot;CF\\\&quot;, \\\&quot;CH\\\&quot;, \\\&quot;CI\\\&quot;, \\\&quot;CK\\\&quot;, \\\&quot;CL\\\&quot;, \\\&quot;CM\\\&quot;, \\\&quot;CN\\\&quot;, \\\&quot;CO\\\&quot;, \\\&quot;CR\\\&quot;, \\\&quot;CU\\\&quot;, \\\&quot;CV\\\&quot;, \\\&quot;CW\\\&quot;, \\\&quot;CX\\\&quot;, \\\&quot;CY\\\&quot;, \\\&quot;CZ\\\&quot;, \\\&quot;DE\\\&quot;, \\\&quot;DJ\\\&quot;, \\\&quot;DK\\\&quot;, \\\&quot;DM\\\&quot;, \\\&quot;DO\\\&quot;, \\\&quot;DZ\\\&quot;, \\\&quot;EC\\\&quot;, \\\&quot;EE\\\&quot;, \\\&quot;EG\\\&quot;, \\\&quot;ER\\\&quot;, \\\&quot;ES\\\&quot;, \\\&quot;ET\\\&quot;, \\\&quot;FI\\\&quot;, \\\&quot;FJ\\\&quot;, \\\&quot;FK\\\&quot;, \\\&quot;FM\\\&quot;, \\\&quot;FO\\\&quot;, \\\&quot;FR\\\&quot;, \\\&quot;GA\\\&quot;, \\\&quot;GB\\\&quot;, \\\&quot;GD\\\&quot;, \\\&quot;GE\\\&quot;, \\\&quot;GF\\\&quot;, \\\&quot;GG\\\&quot;, \\\&quot;GH\\\&quot;, \\\&quot;GI\\\&quot;, \\\&quot;GL\\\&quot;, \\\&quot;GM\\\&quot;, \\\&quot;GN\\\&quot;, \\\&quot;GP\\\&quot;, \\\&quot;GR\\\&quot;, \\\&quot;GS\\\&quot;, \\\&quot;GT\\\&quot;, \\\&quot;GU\\\&quot;, \\\&quot;GY\\\&quot;, \\\&quot;HK\\\&quot;, \\\&quot;HN\\\&quot;, \\\&quot;HR\\\&quot;, \\\&quot;HU\\\&quot;, \\\&quot;ID\\\&quot;, \\\&quot;IE\\\&quot;, \\\&quot;IL\\\&quot;, \\\&quot;IM\\\&quot;, \\\&quot;IN\\\&quot;, \\\&quot;IS\\\&quot;, \\\&quot;IT\\\&quot;, \\\&quot;JE\\\&quot;, \\\&quot;JM\\\&quot;, \\\&quot;JO\\\&quot;, \\\&quot;JP\\\&quot;, \\\&quot;KE\\\&quot;, \\\&quot;KG\\\&quot;, \\\&quot;KI\\\&quot;, \\\&quot;KM\\\&quot;, \\\&quot;KN\\\&quot;, \\\&quot;KR\\\&quot;, \\\&quot;KW\\\&quot;, \\\&quot;KY\\\&quot;, \\\&quot;KZ\\\&quot;, \\\&quot;LA\\\&quot;, \\\&quot;LA\\\&quot;, \\\&quot;LB\\\&quot;, \\\&quot;LC\\\&quot;, \\\&quot;LI\\\&quot;, \\\&quot;LK\\\&quot;, \\\&quot;LR\\\&quot;, \\\&quot;LS\\\&quot;, \\\&quot;LT\\\&quot;, \\\&quot;LU\\\&quot;, \\\&quot;LV\\\&quot;, \\\&quot;MA\\\&quot;, \\\&quot;MC\\\&quot;, \\\&quot;MD\\\&quot;, \\\&quot;ME\\\&quot;, \\\&quot;MF\\\&quot;, \\\&quot;MG\\\&quot;, \\\&quot;MH\\\&quot;, \\\&quot;MK\\\&quot;, \\\&quot;MK\\\&quot;, \\\&quot;ML\\\&quot;, \\\&quot;MM\\\&quot;, \\\&quot;MN\\\&quot;, \\\&quot;MO\\\&quot;, \\\&quot;MP\\\&quot;, \\\&quot;MQ\\\&quot;, \\\&quot;MR\\\&quot;, \\\&quot;MT\\\&quot;, \\\&quot;MU\\\&quot;, \\\&quot;MV\\\&quot;, \\\&quot;MW\\\&quot;, \\\&quot;MX\\\&quot;, \\\&quot;MY\\\&quot;, \\\&quot;MZ\\\&quot;, \\\&quot;NA\\\&quot;, \\\&quot;NC\\\&quot;, \\\&quot;NE\\\&quot;, \\\&quot;NF\\\&quot;, \\\&quot;NG\\\&quot;, \\\&quot;NI\\\&quot;, \\\&quot;NL\\\&quot;, \\\&quot;NO\\\&quot;, \\\&quot;NP\\\&quot;, \\\&quot;NR\\\&quot;, \\\&quot;NU\\\&quot;, \\\&quot;NZ\\\&quot;, \\\&quot;OM\\\&quot;, \\\&quot;PA\\\&quot;, \\\&quot;PE\\\&quot;, \\\&quot;PF\\\&quot;, \\\&quot;PG\\\&quot;, \\\&quot;PH\\\&quot;, \\\&quot;PK\\\&quot;, \\\&quot;PL\\\&quot;, \\\&quot;PM\\\&quot;, \\\&quot;PR\\\&quot;, \\\&quot;PS\\\&quot;, \\\&quot;PT\\\&quot;, \\\&quot;PW\\\&quot;, \\\&quot;PY\\\&quot;, \\\&quot;QA\\\&quot;, \\\&quot;RE\\\&quot;, \\\&quot;RO\\\&quot;, \\\&quot;RS\\\&quot;, \\\&quot;RU\\\&quot;, \\\&quot;RW\\\&quot;, \\\&quot;SA\\\&quot;, \\\&quot;SB\\\&quot;, \\\&quot;SC\\\&quot;, \\\&quot;SE\\\&quot;, \\\&quot;SG\\\&quot;, \\\&quot;SH\\\&quot;, \\\&quot;SI\\\&quot;, \\\&quot;SJ\\\&quot;, \\\&quot;SK\\\&quot;, \\\&quot;SL\\\&quot;, \\\&quot;SM\\\&quot;, \\\&quot;SN\\\&quot;, \\\&quot;SR\\\&quot;, \\\&quot;ST\\\&quot;, \\\&quot;SV\\\&quot;, \\\&quot;SX\\\&quot;, \\\&quot;SZ\\\&quot;, \\\&quot;TC\\\&quot;, \\\&quot;TF\\\&quot;, \\\&quot;TG\\\&quot;, \\\&quot;TH\\\&quot;, \\\&quot;TJ\\\&quot;, \\\&quot;TK\\\&quot;, \\\&quot;TL\\\&quot;, \\\&quot;TO\\\&quot;, \\\&quot;TR\\\&quot;, \\\&quot;TT\\\&quot;, \\\&quot;TV\\\&quot;, \\\&quot;TW\\\&quot;, \\\&quot;TZ\\\&quot;, \\\&quot;UA\\\&quot;, \\\&quot;UG\\\&quot;, \\\&quot;UM\\\&quot;, \\\&quot;US\\\&quot;, \\\&quot;UY\\\&quot;, \\\&quot;UZ\\\&quot;, \\\&quot;VA\\\&quot;, \\\&quot;VC\\\&quot;, \\\&quot;VG\\\&quot;, \\\&quot;VI\\\&quot;, \\\&quot;VN\\\&quot;, \\\&quot;VU\\\&quot;, \\\&quot;WF\\\&quot;, \\\&quot;WS\\\&quot;, \\\&quot;XK\\\&quot;, \\\&quot;YT\\\&quot;, \\\&quot;ZA\\\&quot;, \\\&quot;ZM\\\&quot;, \\\&quot;ZW\\\&quot;]\\\&quot; (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder billingCountries(List<String> billingCountries) {
            this.billingCountries = billingCountries;
            return this;
        }
        
        /**
         * Set discountLines
         * @param discountLines List of discounts applied to this order via the KCO discount-service (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder discountLines(List<DiscountLine> discountLines) {
            this.discountLines = discountLines;
            return this;
        }
        
        /**
         * Set klarnaPartner
         * @param klarnaPartner  (optional)
         * @return CreateNewOrderRequestBuilder
         */
        public CreateNewOrderRequestBuilder klarnaPartner(String klarnaPartner) {
            this.klarnaPartner = klarnaPartner;
            return this;
        }
        
        /**
         * Build call for createNewOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> We were unable to create an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Order order = buildBodyParams();
            return createNewOrderCall(klarnaPartner, order, _callback);
        }

        private Order buildBodyParams() {
            Order order = new Order();
            order.tags(this.tags);
            order.orderId(this.orderId);
            order.name(this.name);
            order.purchaseCountry(this.purchaseCountry);
            order.purchaseCurrency(this.purchaseCurrency);
            order.locale(this.locale);
            order.status(this.status);
            order.billingAddress(this.billingAddress);
            order.shippingAddress(this.shippingAddress);
            order.orderAmount(this.orderAmount);
            order.orderTaxAmount(this.orderTaxAmount);
            order.orderLines(this.orderLines);
            order.customer(this.customer);
            order.merchantUrls(this.merchantUrls);
            order.htmlSnippet(this.htmlSnippet);
            order.merchantReference1(this.merchantReference1);
            order.merchantReference2(this.merchantReference2);
            order.startedAt(this.startedAt);
            order.completedAt(this.completedAt);
            order.lastModifiedAt(this.lastModifiedAt);
            order.options(this.options);
            order.attachment(this.attachment);
            order.externalPaymentMethods(this.externalPaymentMethods);
            order.externalCheckouts(this.externalCheckouts);
            order.shippingCountries(this.shippingCountries);
            order.shippingOptions(this.shippingOptions);
            order.merchantData(this.merchantData);
            order.gui(this.gui);
            order.merchantRequested(this.merchantRequested);
            order.selectedShippingOption(this.selectedShippingOption);
            order.recurring(this.recurring);
            order.recurringToken(this.recurringToken);
            order.recurringDescription(this.recurringDescription);
            order.billingCountries(this.billingCountries);
            order.discountLines(this.discountLines);
            return order;
        }

        /**
         * Execute createNewOrder request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> We were unable to create an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            Order order = buildBodyParams();
            ApiResponse<Order> localVarResp = createNewOrderWithHttpInfo(klarnaPartner, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewOrder request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> We were unable to create an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            Order order = buildBodyParams();
            return createNewOrderWithHttpInfo(klarnaPartner, order);
        }

        /**
         * Execute createNewOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> We were unable to create an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            Order order = buildBodyParams();
            return createNewOrderAsync(klarnaPartner, order, _callback);
        }
    }

    /**
     * Create an order
     * To create a new order simply provide a JSON object with the applicable properties.&lt;br&gt;The location of the newly created checkout order can be found in the location header of the response.&lt;br&gt;Please note: This is the url that should be used for future interactions (read and update) with the order, i.e. do not construct the order url based on the order id.
     * @return CreateNewOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to create an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewOrderRequestBuilder createNewOrder(String purchaseCountry, String purchaseCurrency, String locale, Long orderAmount, Long orderTaxAmount, List<OrderLine> orderLines) throws IllegalArgumentException {
        if (purchaseCountry == null) throw new IllegalArgumentException("\"purchaseCountry\" is required but got null");
            

        if (purchaseCurrency == null) throw new IllegalArgumentException("\"purchaseCurrency\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        if (orderAmount == null) throw new IllegalArgumentException("\"orderAmount\" is required but got null");
        if (orderTaxAmount == null) throw new IllegalArgumentException("\"orderTaxAmount\" is required but got null");
        if (orderLines == null) throw new IllegalArgumentException("\"orderLines\" is required but got null");
        return new CreateNewOrderRequestBuilder(purchaseCountry, purchaseCurrency, locale, orderAmount, orderTaxAmount, orderLines);
    }
    private okhttp3.Call getOrderDetailsCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checkout/v3/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderDetailsValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderDetails(Async)");
        }

        return getOrderDetailsCall(orderId, _callback);

    }


    private ApiResponse<Order> getOrderDetailsWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getOrderDetailsValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrderDetailsAsync(String orderId, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderDetailsValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrderDetailsRequestBuilder {
        private final String orderId;

        private GetOrderDetailsRequestBuilder(String orderId) {
            this.orderId = orderId;
        }

        /**
         * Build call for getOrderDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Merchant was not activated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrderDetailsCall(orderId, _callback);
        }


        /**
         * Execute getOrderDetails request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Merchant was not activated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            ApiResponse<Order> localVarResp = getOrderDetailsWithHttpInfo(orderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrderDetails request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Merchant was not activated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            return getOrderDetailsWithHttpInfo(orderId);
        }

        /**
         * Execute getOrderDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Merchant was not activated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            return getOrderDetailsAsync(orderId, _callback);
        }
    }

    /**
     * Get order details
     * Get the full details of a Klarna checkout order.
     * @param orderId  (required)
     * @return GetOrderDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Merchant was not activated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrderDetailsRequestBuilder getOrderDetails(String orderId) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new GetOrderDetailsRequestBuilder(orderId);
    }
    private okhttp3.Call updateOrderCall(String orderId, Order order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = order;

        // create path and map variables
        String localVarPath = "/checkout/v3/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderValidateBeforeCall(String orderId, Order order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrder(Async)");
        }

        return updateOrderCall(orderId, order, _callback);

    }


    private ApiResponse<Order> updateOrderWithHttpInfo(String orderId, Order order) throws ApiException {
        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(orderId, order, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrderAsync(String orderId, Order order, final ApiCallback<Order> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(orderId, order, _callback);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOrderRequestBuilder {
        private final String purchaseCountry;
        private final String purchaseCurrency;
        private final String locale;
        private final Long orderAmount;
        private final Long orderTaxAmount;
        private final List<OrderLine> orderLines;
        private final String orderId;
        private List<String> tags;
        private String orderId;
        private String name;
        private String status;
        private Address billingAddress;
        private Address shippingAddress;
        private Customer customer;
        private MerchantUrls merchantUrls;
        private String htmlSnippet;
        private String merchantReference1;
        private String merchantReference2;
        private OffsetDateTime startedAt;
        private OffsetDateTime completedAt;
        private OffsetDateTime lastModifiedAt;
        private Options options;
        private Attachment attachment;
        private List<PaymentProvider> externalPaymentMethods;
        private List<PaymentProvider> externalCheckouts;
        private List<String> shippingCountries;
        private List<ShippingOption> shippingOptions;
        private String merchantData;
        private Gui gui;
        private MerchantRequested merchantRequested;
        private ShippingOption selectedShippingOption;
        private Boolean recurring;
        private String recurringToken;
        private String recurringDescription;
        private List<String> billingCountries;
        private List<DiscountLine> discountLines;

        private UpdateOrderRequestBuilder(String purchaseCountry, String purchaseCurrency, String locale, Long orderAmount, Long orderTaxAmount, List<OrderLine> orderLines, String orderId) {
            this.purchaseCountry = purchaseCountry;
            this.purchaseCurrency = purchaseCurrency;
            this.locale = locale;
            this.orderAmount = orderAmount;
            this.orderTaxAmount = orderTaxAmount;
            this.orderLines = orderLines;
            this.orderId = orderId;
        }

        /**
         * Set tags
         * @param tags Extra information added to the order.  Example: [\\\&quot;dangerous_goods\\\&quot;, \\\&quot;bulky\\\&quot;] (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set orderId
         * @param orderId Unique order ID that will be used for the entire lifecycle of the order. (max 255 characters) (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder orderId(String orderId) {
            this.orderId = orderId;
            return this;
        }
        
        /**
         * Set name
         * @param name The merchant name (max 255 characters). (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set status
         * @param status The current status of the order. The status will be ‘incomplete’ until the customer has been successfully authorized. (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set billingAddress
         * @param billingAddress  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder billingAddress(Address billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }
        
        /**
         * Set shippingAddress
         * @param shippingAddress  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder shippingAddress(Address shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        
        /**
         * Set customer
         * @param customer  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder customer(Customer customer) {
            this.customer = customer;
            return this;
        }
        
        /**
         * Set merchantUrls
         * @param merchantUrls  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder merchantUrls(MerchantUrls merchantUrls) {
            this.merchantUrls = merchantUrls;
            return this;
        }
        
        /**
         * Set htmlSnippet
         * @param htmlSnippet The HTML snippet that is used to render the checkout in an iframe. (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder htmlSnippet(String htmlSnippet) {
            this.htmlSnippet = htmlSnippet;
            return this;
        }
        
        /**
         * Set merchantReference1
         * @param merchantReference1 Used for storing merchant&#39;s internal order number or other reference. If set, will be shown on the confirmation page as \\\&quot;order number\\\&quot; . The value is also available in the settlement files. (max 255 characters). Example: \\\&quot;45aa52f387871e3a210645d4\\\&quot; (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder merchantReference1(String merchantReference1) {
            this.merchantReference1 = merchantReference1;
            return this;
        }
        
        /**
         * Set merchantReference2
         * @param merchantReference2 Used for storing merchant&#39;s internal order number or other reference. The value is available in the settlement files. (max 255 characters). Example: \\\&quot;45aa52f387871e3a210645d4\\\&quot; (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder merchantReference2(String merchantReference2) {
            this.merchantReference2 = merchantReference2;
            return this;
        }
        
        /**
         * Set startedAt
         * @param startedAt ISO 8601 datetime. The date and time when the order has been created. The format will be as follows: \\\&quot;yyyy-mm-ddThh:mm:ssZ\\\&quot; (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder startedAt(OffsetDateTime startedAt) {
            this.startedAt = startedAt;
            return this;
        }
        
        /**
         * Set completedAt
         * @param completedAt ISO 8601 datetime. The date and time when the order has been completed. The format will be as follows: \\\&quot;yyyy-mm-ddThh:mm:ssZ\\\&quot; (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder completedAt(OffsetDateTime completedAt) {
            this.completedAt = completedAt;
            return this;
        }
        
        /**
         * Set lastModifiedAt
         * @param lastModifiedAt ISO 8601 datetime. The date and time when the order was last modified. The format will be as follows: \\\&quot;yyyy-mm-ddThh:mm:ssZ\\\&quot; (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder lastModifiedAt(OffsetDateTime lastModifiedAt) {
            this.lastModifiedAt = lastModifiedAt;
            return this;
        }
        
        /**
         * Set options
         * @param options  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder options(Options options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set attachment
         * @param attachment  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder attachment(Attachment attachment) {
            this.attachment = attachment;
            return this;
        }
        
        /**
         * Set externalPaymentMethods
         * @param externalPaymentMethods List of external payment methods that will be displayed as part of payment methods in the checkout. (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder externalPaymentMethods(List<PaymentProvider> externalPaymentMethods) {
            this.externalPaymentMethods = externalPaymentMethods;
            return this;
        }
        
        /**
         * Set externalCheckouts
         * @param externalCheckouts List of external checkouts that will be displayed as part of payment methods in the checkout. The image_url is required, and the image size has to be 276x48px (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder externalCheckouts(List<PaymentProvider> externalCheckouts) {
            this.externalCheckouts = externalCheckouts;
            return this;
        }
        
        /**
         * Set shippingCountries
         * @param shippingCountries List of allowed shipping countries for this order in ISO-3166 alpha-2 format.  If specified, the customer will be able to change the shipping country in the checkout and you will be notified through ‘address_update’ callback or the ‘shipping_address_change’ javascript event.   If not specified then the default value will be the purchase country.  Example: look at billing_countries example. (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder shippingCountries(List<String> shippingCountries) {
            this.shippingCountries = shippingCountries;
            return this;
        }
        
        /**
         * Set shippingOptions
         * @param shippingOptions A list of shipping options available for this order. (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder shippingOptions(List<ShippingOption> shippingOptions) {
            this.shippingOptions = shippingOptions;
            return this;
        }
        
        /**
         * Set merchantData
         * @param merchantData Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters). (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder merchantData(String merchantData) {
            this.merchantData = merchantData;
            return this;
        }
        
        /**
         * Set gui
         * @param gui  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder gui(Gui gui) {
            this.gui = gui;
            return this;
        }
        
        /**
         * Set merchantRequested
         * @param merchantRequested  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder merchantRequested(MerchantRequested merchantRequested) {
            this.merchantRequested = merchantRequested;
            return this;
        }
        
        /**
         * Set selectedShippingOption
         * @param selectedShippingOption  (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder selectedShippingOption(ShippingOption selectedShippingOption) {
            this.selectedShippingOption = selectedShippingOption;
            return this;
        }
        
        /**
         * Set recurring
         * @param recurring Indicates whether this purchase will create a token that can be used by the merchant to create recurring purchases. This must be enabled for the merchant to use. Default: false  Depending on specified country, recurring could be used for the following payment methods: Pay Later, Direct Debit, Card. (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder recurring(Boolean recurring) {
            this.recurring = recurring;
            return this;
        }
        
        /**
         * Set recurringToken
         * @param recurringToken Token to be used when creating recurring orders. (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder recurringToken(String recurringToken) {
            this.recurringToken = recurringToken;
            return this;
        }
        
        /**
         * Set recurringDescription
         * @param recurringDescription Description to be added to the recurring order. (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder recurringDescription(String recurringDescription) {
            this.recurringDescription = recurringDescription;
            return this;
        }
        
        /**
         * Set billingCountries
         * @param billingCountries List of allowed billing countries for this order. If specified, the customer will be able to change the billing country in the checkout and you will be notified through ‘country_change’ callback or the ‘billing_address_change’ javascript event. If not specified but shipping_countries is specified, will use same values as shipping_countries. If not specified and shipping_countries is not specified, then the default value will be the purchase country.  Example: [\\\&quot;AD\\\&quot;, \\\&quot;AE\\\&quot;, \\\&quot;AG\\\&quot;, \\\&quot;AI\\\&quot;, \\\&quot;AL\\\&quot;, \\\&quot;AM\\\&quot;, \\\&quot;AQ\\\&quot;, \\\&quot;AR\\\&quot;, \\\&quot;AS\\\&quot;, \\\&quot;AT\\\&quot;, \\\&quot;AU\\\&quot;, \\\&quot;AW\\\&quot;, \\\&quot;AX\\\&quot;, \\\&quot;AZ\\\&quot;, \\\&quot;BA\\\&quot;, \\\&quot;BB\\\&quot;, \\\&quot;BD\\\&quot;, \\\&quot;BE\\\&quot;, \\\&quot;BF\\\&quot;, \\\&quot;BG\\\&quot;, \\\&quot;BH\\\&quot;, \\\&quot;BJ\\\&quot;, \\\&quot;BL\\\&quot;, \\\&quot;BM\\\&quot;, \\\&quot;BN\\\&quot;, \\\&quot;BO\\\&quot;, \\\&quot;BQ\\\&quot;, \\\&quot;BR\\\&quot;, \\\&quot;BS\\\&quot;, \\\&quot;BT\\\&quot;, \\\&quot;BW\\\&quot;, \\\&quot;BY\\\&quot;, \\\&quot;BZ\\\&quot;, \\\&quot;CA\\\&quot;, \\\&quot;CF\\\&quot;, \\\&quot;CH\\\&quot;, \\\&quot;CI\\\&quot;, \\\&quot;CK\\\&quot;, \\\&quot;CL\\\&quot;, \\\&quot;CM\\\&quot;, \\\&quot;CN\\\&quot;, \\\&quot;CO\\\&quot;, \\\&quot;CR\\\&quot;, \\\&quot;CU\\\&quot;, \\\&quot;CV\\\&quot;, \\\&quot;CW\\\&quot;, \\\&quot;CX\\\&quot;, \\\&quot;CY\\\&quot;, \\\&quot;CZ\\\&quot;, \\\&quot;DE\\\&quot;, \\\&quot;DJ\\\&quot;, \\\&quot;DK\\\&quot;, \\\&quot;DM\\\&quot;, \\\&quot;DO\\\&quot;, \\\&quot;DZ\\\&quot;, \\\&quot;EC\\\&quot;, \\\&quot;EE\\\&quot;, \\\&quot;EG\\\&quot;, \\\&quot;ER\\\&quot;, \\\&quot;ES\\\&quot;, \\\&quot;ET\\\&quot;, \\\&quot;FI\\\&quot;, \\\&quot;FJ\\\&quot;, \\\&quot;FK\\\&quot;, \\\&quot;FM\\\&quot;, \\\&quot;FO\\\&quot;, \\\&quot;FR\\\&quot;, \\\&quot;GA\\\&quot;, \\\&quot;GB\\\&quot;, \\\&quot;GD\\\&quot;, \\\&quot;GE\\\&quot;, \\\&quot;GF\\\&quot;, \\\&quot;GG\\\&quot;, \\\&quot;GH\\\&quot;, \\\&quot;GI\\\&quot;, \\\&quot;GL\\\&quot;, \\\&quot;GM\\\&quot;, \\\&quot;GN\\\&quot;, \\\&quot;GP\\\&quot;, \\\&quot;GR\\\&quot;, \\\&quot;GS\\\&quot;, \\\&quot;GT\\\&quot;, \\\&quot;GU\\\&quot;, \\\&quot;GY\\\&quot;, \\\&quot;HK\\\&quot;, \\\&quot;HN\\\&quot;, \\\&quot;HR\\\&quot;, \\\&quot;HU\\\&quot;, \\\&quot;ID\\\&quot;, \\\&quot;IE\\\&quot;, \\\&quot;IL\\\&quot;, \\\&quot;IM\\\&quot;, \\\&quot;IN\\\&quot;, \\\&quot;IS\\\&quot;, \\\&quot;IT\\\&quot;, \\\&quot;JE\\\&quot;, \\\&quot;JM\\\&quot;, \\\&quot;JO\\\&quot;, \\\&quot;JP\\\&quot;, \\\&quot;KE\\\&quot;, \\\&quot;KG\\\&quot;, \\\&quot;KI\\\&quot;, \\\&quot;KM\\\&quot;, \\\&quot;KN\\\&quot;, \\\&quot;KR\\\&quot;, \\\&quot;KW\\\&quot;, \\\&quot;KY\\\&quot;, \\\&quot;KZ\\\&quot;, \\\&quot;LA\\\&quot;, \\\&quot;LA\\\&quot;, \\\&quot;LB\\\&quot;, \\\&quot;LC\\\&quot;, \\\&quot;LI\\\&quot;, \\\&quot;LK\\\&quot;, \\\&quot;LR\\\&quot;, \\\&quot;LS\\\&quot;, \\\&quot;LT\\\&quot;, \\\&quot;LU\\\&quot;, \\\&quot;LV\\\&quot;, \\\&quot;MA\\\&quot;, \\\&quot;MC\\\&quot;, \\\&quot;MD\\\&quot;, \\\&quot;ME\\\&quot;, \\\&quot;MF\\\&quot;, \\\&quot;MG\\\&quot;, \\\&quot;MH\\\&quot;, \\\&quot;MK\\\&quot;, \\\&quot;MK\\\&quot;, \\\&quot;ML\\\&quot;, \\\&quot;MM\\\&quot;, \\\&quot;MN\\\&quot;, \\\&quot;MO\\\&quot;, \\\&quot;MP\\\&quot;, \\\&quot;MQ\\\&quot;, \\\&quot;MR\\\&quot;, \\\&quot;MT\\\&quot;, \\\&quot;MU\\\&quot;, \\\&quot;MV\\\&quot;, \\\&quot;MW\\\&quot;, \\\&quot;MX\\\&quot;, \\\&quot;MY\\\&quot;, \\\&quot;MZ\\\&quot;, \\\&quot;NA\\\&quot;, \\\&quot;NC\\\&quot;, \\\&quot;NE\\\&quot;, \\\&quot;NF\\\&quot;, \\\&quot;NG\\\&quot;, \\\&quot;NI\\\&quot;, \\\&quot;NL\\\&quot;, \\\&quot;NO\\\&quot;, \\\&quot;NP\\\&quot;, \\\&quot;NR\\\&quot;, \\\&quot;NU\\\&quot;, \\\&quot;NZ\\\&quot;, \\\&quot;OM\\\&quot;, \\\&quot;PA\\\&quot;, \\\&quot;PE\\\&quot;, \\\&quot;PF\\\&quot;, \\\&quot;PG\\\&quot;, \\\&quot;PH\\\&quot;, \\\&quot;PK\\\&quot;, \\\&quot;PL\\\&quot;, \\\&quot;PM\\\&quot;, \\\&quot;PR\\\&quot;, \\\&quot;PS\\\&quot;, \\\&quot;PT\\\&quot;, \\\&quot;PW\\\&quot;, \\\&quot;PY\\\&quot;, \\\&quot;QA\\\&quot;, \\\&quot;RE\\\&quot;, \\\&quot;RO\\\&quot;, \\\&quot;RS\\\&quot;, \\\&quot;RU\\\&quot;, \\\&quot;RW\\\&quot;, \\\&quot;SA\\\&quot;, \\\&quot;SB\\\&quot;, \\\&quot;SC\\\&quot;, \\\&quot;SE\\\&quot;, \\\&quot;SG\\\&quot;, \\\&quot;SH\\\&quot;, \\\&quot;SI\\\&quot;, \\\&quot;SJ\\\&quot;, \\\&quot;SK\\\&quot;, \\\&quot;SL\\\&quot;, \\\&quot;SM\\\&quot;, \\\&quot;SN\\\&quot;, \\\&quot;SR\\\&quot;, \\\&quot;ST\\\&quot;, \\\&quot;SV\\\&quot;, \\\&quot;SX\\\&quot;, \\\&quot;SZ\\\&quot;, \\\&quot;TC\\\&quot;, \\\&quot;TF\\\&quot;, \\\&quot;TG\\\&quot;, \\\&quot;TH\\\&quot;, \\\&quot;TJ\\\&quot;, \\\&quot;TK\\\&quot;, \\\&quot;TL\\\&quot;, \\\&quot;TO\\\&quot;, \\\&quot;TR\\\&quot;, \\\&quot;TT\\\&quot;, \\\&quot;TV\\\&quot;, \\\&quot;TW\\\&quot;, \\\&quot;TZ\\\&quot;, \\\&quot;UA\\\&quot;, \\\&quot;UG\\\&quot;, \\\&quot;UM\\\&quot;, \\\&quot;US\\\&quot;, \\\&quot;UY\\\&quot;, \\\&quot;UZ\\\&quot;, \\\&quot;VA\\\&quot;, \\\&quot;VC\\\&quot;, \\\&quot;VG\\\&quot;, \\\&quot;VI\\\&quot;, \\\&quot;VN\\\&quot;, \\\&quot;VU\\\&quot;, \\\&quot;WF\\\&quot;, \\\&quot;WS\\\&quot;, \\\&quot;XK\\\&quot;, \\\&quot;YT\\\&quot;, \\\&quot;ZA\\\&quot;, \\\&quot;ZM\\\&quot;, \\\&quot;ZW\\\&quot;]\\\&quot; (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder billingCountries(List<String> billingCountries) {
            this.billingCountries = billingCountries;
            return this;
        }
        
        /**
         * Set discountLines
         * @param discountLines List of discounts applied to this order via the KCO discount-service (optional)
         * @return UpdateOrderRequestBuilder
         */
        public UpdateOrderRequestBuilder discountLines(List<DiscountLine> discountLines) {
            this.discountLines = discountLines;
            return this;
        }
        
        /**
         * Build call for updateOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> We were unable to update an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Order order = buildBodyParams();
            return updateOrderCall(orderId, order, _callback);
        }

        private Order buildBodyParams() {
            Order order = new Order();
            order.tags(this.tags);
            order.orderId(this.orderId);
            order.name(this.name);
            order.purchaseCountry(this.purchaseCountry);
            order.purchaseCurrency(this.purchaseCurrency);
            order.locale(this.locale);
            order.status(this.status);
            order.billingAddress(this.billingAddress);
            order.shippingAddress(this.shippingAddress);
            order.orderAmount(this.orderAmount);
            order.orderTaxAmount(this.orderTaxAmount);
            order.orderLines(this.orderLines);
            order.customer(this.customer);
            order.merchantUrls(this.merchantUrls);
            order.htmlSnippet(this.htmlSnippet);
            order.merchantReference1(this.merchantReference1);
            order.merchantReference2(this.merchantReference2);
            order.startedAt(this.startedAt);
            order.completedAt(this.completedAt);
            order.lastModifiedAt(this.lastModifiedAt);
            order.options(this.options);
            order.attachment(this.attachment);
            order.externalPaymentMethods(this.externalPaymentMethods);
            order.externalCheckouts(this.externalCheckouts);
            order.shippingCountries(this.shippingCountries);
            order.shippingOptions(this.shippingOptions);
            order.merchantData(this.merchantData);
            order.gui(this.gui);
            order.merchantRequested(this.merchantRequested);
            order.selectedShippingOption(this.selectedShippingOption);
            order.recurring(this.recurring);
            order.recurringToken(this.recurringToken);
            order.recurringDescription(this.recurringDescription);
            order.billingCountries(this.billingCountries);
            order.discountLines(this.discountLines);
            return order;
        }

        /**
         * Execute updateOrder request
         * @return Order
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> We were unable to update an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public Order execute() throws ApiException {
            Order order = buildBodyParams();
            ApiResponse<Order> localVarResp = updateOrderWithHttpInfo(orderId, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOrder request with HTTP info returned
         * @return ApiResponse&lt;Order&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> We were unable to update an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Order> executeWithHttpInfo() throws ApiException {
            Order order = buildBodyParams();
            return updateOrderWithHttpInfo(orderId, order);
        }

        /**
         * Execute updateOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> We were unable to update an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Order> _callback) throws ApiException {
            Order order = buildBodyParams();
            return updateOrderAsync(orderId, order, _callback);
        }
    }

    /**
     * Update an order
     * To update an order simply provide a JSON object with the properties you want to update. Properties not provided in the request will stay the same.&lt;br&gt;Please note: an order can only be updated when the status is checkout_incomplete
     * @param orderId  (required)
     * @return UpdateOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> We were unable to update an order with the provided data. Some field constraint was violated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> You were not authorized to execute this operation. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You tried to modify a read only resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> We did not find any order with given ID. You need to create a new order. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrderRequestBuilder updateOrder(String purchaseCountry, String purchaseCurrency, String locale, Long orderAmount, Long orderTaxAmount, List<OrderLine> orderLines, String orderId) throws IllegalArgumentException {
        if (purchaseCountry == null) throw new IllegalArgumentException("\"purchaseCountry\" is required but got null");
            

        if (purchaseCurrency == null) throw new IllegalArgumentException("\"purchaseCurrency\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        if (orderAmount == null) throw new IllegalArgumentException("\"orderAmount\" is required but got null");
        if (orderTaxAmount == null) throw new IllegalArgumentException("\"orderTaxAmount\" is required but got null");
        if (orderLines == null) throw new IllegalArgumentException("\"orderLines\" is required but got null");
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new UpdateOrderRequestBuilder(purchaseCountry, purchaseCurrency, locale, orderAmount, orderTaxAmount, orderLines, orderId);
    }
}

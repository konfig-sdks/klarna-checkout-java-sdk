/*
 * Klarna Checkout API V3
 * The checkout API is used to create a checkout with Klarna and update the checkout order during the purchase. As soon as the purchase is completed the order should be read and handled using the [`Order Management API`](https://docs.klarna.com/api/ordermanagement).\\n\\nRead more on [Klarna checkout](https://docs.klarna.com/klarna-checkout/).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.DiscountLine;
import com.konfigthis.client.model.Gui;
import com.konfigthis.client.model.MerchantRequested;
import com.konfigthis.client.model.MerchantUrls;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Options;
import com.konfigthis.client.model.Order;
import com.konfigthis.client.model.OrderLine;
import com.konfigthis.client.model.PaymentProvider;
import com.konfigthis.client.model.ShippingOption;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
@Disabled
public class OrderApiTest {

    private static OrderApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OrderApi(apiClient);
    }

    /**
     * Abort an order
     *
     * Mark an order as aborted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void abortOrderTest() throws ApiException {
        String orderId = null;
        Order response = api.abortOrder(orderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an order
     *
     * To create a new order simply provide a JSON object with the applicable properties.&lt;br&gt;The location of the newly created checkout order can be found in the location header of the response.&lt;br&gt;Please note: This is the url that should be used for future interactions (read and update) with the order, i.e. do not construct the order url based on the order id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewOrderTest() throws ApiException {
        String purchaseCountry = null;
        String purchaseCurrency = null;
        String locale = null;
        Long orderAmount = null;
        Long orderTaxAmount = null;
        List<OrderLine> orderLines = null;
        List<String> tags = null;
        String orderId = null;
        String name = null;
        String status = null;
        Address billingAddress = null;
        Address shippingAddress = null;
        Customer customer = null;
        MerchantUrls merchantUrls = null;
        String htmlSnippet = null;
        String merchantReference1 = null;
        String merchantReference2 = null;
        OffsetDateTime startedAt = null;
        OffsetDateTime completedAt = null;
        OffsetDateTime lastModifiedAt = null;
        Options options = null;
        Attachment attachment = null;
        List<PaymentProvider> externalPaymentMethods = null;
        List<PaymentProvider> externalCheckouts = null;
        List<String> shippingCountries = null;
        List<ShippingOption> shippingOptions = null;
        String merchantData = null;
        Gui gui = null;
        MerchantRequested merchantRequested = null;
        ShippingOption selectedShippingOption = null;
        Boolean recurring = null;
        String recurringToken = null;
        String recurringDescription = null;
        List<String> billingCountries = null;
        List<DiscountLine> discountLines = null;
        String klarnaPartner = null;
        Order response = api.createNewOrder(purchaseCountry, purchaseCurrency, locale, orderAmount, orderTaxAmount, orderLines)
                .tags(tags)
                .orderId(orderId)
                .name(name)
                .status(status)
                .billingAddress(billingAddress)
                .shippingAddress(shippingAddress)
                .customer(customer)
                .merchantUrls(merchantUrls)
                .htmlSnippet(htmlSnippet)
                .merchantReference1(merchantReference1)
                .merchantReference2(merchantReference2)
                .startedAt(startedAt)
                .completedAt(completedAt)
                .lastModifiedAt(lastModifiedAt)
                .options(options)
                .attachment(attachment)
                .externalPaymentMethods(externalPaymentMethods)
                .externalCheckouts(externalCheckouts)
                .shippingCountries(shippingCountries)
                .shippingOptions(shippingOptions)
                .merchantData(merchantData)
                .gui(gui)
                .merchantRequested(merchantRequested)
                .selectedShippingOption(selectedShippingOption)
                .recurring(recurring)
                .recurringToken(recurringToken)
                .recurringDescription(recurringDescription)
                .billingCountries(billingCountries)
                .discountLines(discountLines)
                .klarnaPartner(klarnaPartner)
                .execute();
        // TODO: test validations
    }

    /**
     * Get order details
     *
     * Get the full details of a Klarna checkout order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderDetailsTest() throws ApiException {
        String orderId = null;
        Order response = api.getOrderDetails(orderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an order
     *
     * To update an order simply provide a JSON object with the properties you want to update. Properties not provided in the request will stay the same.&lt;br&gt;Please note: an order can only be updated when the status is checkout_incomplete
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrderTest() throws ApiException {
        String purchaseCountry = null;
        String purchaseCurrency = null;
        String locale = null;
        Long orderAmount = null;
        Long orderTaxAmount = null;
        List<OrderLine> orderLines = null;
        String orderId = null;
        List<String> tags = null;
        String orderId = null;
        String name = null;
        String status = null;
        Address billingAddress = null;
        Address shippingAddress = null;
        Customer customer = null;
        MerchantUrls merchantUrls = null;
        String htmlSnippet = null;
        String merchantReference1 = null;
        String merchantReference2 = null;
        OffsetDateTime startedAt = null;
        OffsetDateTime completedAt = null;
        OffsetDateTime lastModifiedAt = null;
        Options options = null;
        Attachment attachment = null;
        List<PaymentProvider> externalPaymentMethods = null;
        List<PaymentProvider> externalCheckouts = null;
        List<String> shippingCountries = null;
        List<ShippingOption> shippingOptions = null;
        String merchantData = null;
        Gui gui = null;
        MerchantRequested merchantRequested = null;
        ShippingOption selectedShippingOption = null;
        Boolean recurring = null;
        String recurringToken = null;
        String recurringDescription = null;
        List<String> billingCountries = null;
        List<DiscountLine> discountLines = null;
        Order response = api.updateOrder(purchaseCountry, purchaseCurrency, locale, orderAmount, orderTaxAmount, orderLines, orderId)
                .tags(tags)
                .orderId(orderId)
                .name(name)
                .status(status)
                .billingAddress(billingAddress)
                .shippingAddress(shippingAddress)
                .customer(customer)
                .merchantUrls(merchantUrls)
                .htmlSnippet(htmlSnippet)
                .merchantReference1(merchantReference1)
                .merchantReference2(merchantReference2)
                .startedAt(startedAt)
                .completedAt(completedAt)
                .lastModifiedAt(lastModifiedAt)
                .options(options)
                .attachment(attachment)
                .externalPaymentMethods(externalPaymentMethods)
                .externalCheckouts(externalCheckouts)
                .shippingCountries(shippingCountries)
                .shippingOptions(shippingOptions)
                .merchantData(merchantData)
                .gui(gui)
                .merchantRequested(merchantRequested)
                .selectedShippingOption(selectedShippingOption)
                .recurring(recurring)
                .recurringToken(recurringToken)
                .recurringDescription(recurringDescription)
                .billingCountries(billingCountries)
                .discountLines(discountLines)
                .execute();
        // TODO: test validations
    }

}
